<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>day01-关键字-标识符-数据类型</title>
    <url>/2021/04/07/day01-%E5%85%B3%E9%94%AE%E5%AD%97-%E6%A0%87%E8%AF%86%E7%AC%A6-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>今日内容：关键字、标识符、数据类型、常亮、变量</p>
<span id="more"></span>

<h1 id="第一章、关键字"><a href="#第一章、关键字" class="headerlink" title="第一章、关键字"></a>第一章、关键字</h1><h2 id="1-1、什么是关键字"><a href="#1-1、什么是关键字" class="headerlink" title="1.1、什么是关键字"></a>1.1、什么是关键字</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">关键字：被Java语言赋予了特殊含义的单词称为关键字</span><br><span class="line">保留字：暂时还没有赋予特殊含义对的单词，goto、<span class="keyword">const</span>等</span><br></pre></td></tr></table></figure>

<h2 id="1-2、常见的关键字"><a href="#1-2、常见的关键字" class="headerlink" title="1.2、常见的关键字"></a>1.2、常见的关键字</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HelloWorld 案例中，出现的关键字有 <span class="keyword">public</span> 、<span class="class"><span class="keyword">class</span> 、 <span class="title">static</span> 、 <span class="title">void</span> 等，这些单词已经被 <span class="title">Java</span> 赋予了特殊含义，全都是小写字母，<span class="title">notepad</span>++ 中颜色特殊高亮。</span></span><br></pre></td></tr></table></figure>

<h1 id="第二章、标识符"><a href="#第二章、标识符" class="headerlink" title="第二章、标识符"></a>第二章、标识符</h1><h2 id="2-1、什么是标识符"><a href="#2-1、什么是标识符" class="headerlink" title="2.1、什么是标识符"></a>2.1、什么是标识符</h2><p>标识符：是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HelloWorld案例中，出现的标识符有类名：HelloWorld </span></span><br></pre></td></tr></table></figure>

<h2 id="2-2、标识符的命名规则"><a href="#2-2、标识符的命名规则" class="headerlink" title="2.2、标识符的命名规则"></a>2.2、标识符的命名规则</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）标识符由大小写字母、阿拉伯数字、下划线“_”、美元符号“$”组成，不能以数字开头</span><br><span class="line"><span class="number">2</span>）不能把java关键字和保留字作为标识符</span><br><span class="line"><span class="number">3</span>）标识符对大小写敏感（大小写意义不一样）</span><br><span class="line"><span class="number">4</span>）标识符没有长度限制（不能瞎定义）   见名知义</span><br><span class="line">⚠️注意：坚决不能用拼音或汉字或者中英结合的命名方法</span><br></pre></td></tr></table></figure>

<h2 id="2-3、命名规范"><a href="#2-3、命名规范" class="headerlink" title="2.3、命名规范"></a>2.3、命名规范</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）类名、接口名：单词首字母大写（如果多个单词组合，每个单词首字母大写，其余小写）</span><br><span class="line">  Demo 、HelloWorld</span><br><span class="line"><span class="number">2</span>）方法名、变量名：单词全部小写（如果多个单词组合，从第二个单词开始，首字母全部大写，其余小写）</span><br><span class="line">  add、findAllUser name、myName</span><br><span class="line"><span class="number">3</span>）常量名：全部大写（如果多个单词组合，每个单词用下划线_隔开）</span><br><span class="line">  MAX TOTAL_COUNT</span><br></pre></td></tr></table></figure>

<h1 id="第三章、数据类型"><a href="#第三章、数据类型" class="headerlink" title="第三章、数据类型"></a>第三章、数据类型</h1><h2 id="3-1、什么是数据类型"><a href="#3-1、什么是数据类型" class="headerlink" title="3.1、什么是数据类型"></a>3.1、什么是数据类型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">我们人类可以很容易的分清数字与字符的区别，但是计算机并不能呀，计算机虽然很强大，但从某种角度上看又很傻，除非你明确的告诉它，<span class="number">1</span>是数字，“汉”是文字，否则它是分不清<span class="number">1</span>和‘汉’的区别的，因此，在每个编程语言里都会有一个叫数据类型的东西，其实就是对常用的各种数据类型进行了明确的划分，你想让计算机进行数值运算，你就传数字给它，你想让他处理文字，就传字符串类型给它</span><br></pre></td></tr></table></figure>

<h2 id="3-2、数据类型分类"><a href="#3-2、数据类型分类" class="headerlink" title="3.2、数据类型分类"></a>3.2、数据类型分类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型分为两大类：</span><br><span class="line">  基本类型：<span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">int</span>、<span class="keyword">long</span>、<span class="keyword">float</span>、<span class="keyword">double</span>、<span class="keyword">char</span>、<span class="keyword">boolean</span></span><br><span class="line">  引用类型：数组、字符串、类、接口</span><br><span class="line">基本数据类型又分为四大类：</span><br><span class="line">	整数、浮点型、字符、布尔</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">关键字</th>
<th align="center">内存大小</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">字节型</td>
<td align="center">byte</td>
<td align="center">1个字节（8位）</td>
<td align="center">-2^7～2^7-1</td>
</tr>
<tr>
<td align="center">短整型</td>
<td align="center">short</td>
<td align="center">2个字节（16位）</td>
<td align="center">-2^15～2^15-1</td>
</tr>
<tr>
<td align="center">整型</td>
<td align="center">int（默认）</td>
<td align="center">4个字节（32位）</td>
<td align="center">-2^31～2^31-1</td>
</tr>
<tr>
<td align="center">长整型</td>
<td align="center">long</td>
<td align="center">8个字节（64位）</td>
<td align="center">-2^63～2^63-1</td>
</tr>
<tr>
<td align="center">单精度浮点</td>
<td align="center">float</td>
<td align="center">4个字节（32位）</td>
<td align="center">默认值：0.0f</td>
</tr>
<tr>
<td align="center">双精度浮点</td>
<td align="center">double（默认）</td>
<td align="center">8个字节（64位）</td>
<td align="center">默认值：0.0d</td>
</tr>
<tr>
<td align="center">字符</td>
<td align="center">char</td>
<td align="center">2个字节（16位）</td>
<td align="center">0～65535</td>
</tr>
<tr>
<td align="center">布尔类</td>
<td align="center">boolean</td>
<td align="center">1个字节（8位）</td>
<td align="center">true、false</td>
</tr>
</tbody></table>
<h1 id="第四章、常量"><a href="#第四章、常量" class="headerlink" title="第四章、常量"></a>第四章、常量</h1><h2 id="4-1、什么是常量"><a href="#4-1、什么是常量" class="headerlink" title="4.1、什么是常量"></a>4.1、什么是常量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常量；指在Java程序中不变的量</span><br><span class="line">当使用常量的时候，前缀 <span class="number">0</span> 表示 <span class="number">8</span>进制，而前缀 0x 代表<span class="number">16</span>进制</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">01</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0x12</span>;</span><br></pre></td></tr></table></figure>

<h2 id="4-2、常量的分类"><a href="#4-2、常量的分类" class="headerlink" title="4.2、常量的分类"></a>4.2、常量的分类</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">含义</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">整数常量</td>
<td align="center">所有的整数</td>
<td align="center">-20、-1、0、24、101</td>
</tr>
<tr>
<td align="center">小数常量</td>
<td align="center">所有的小数</td>
<td align="center">0.1、-2.7、6.66</td>
</tr>
<tr>
<td align="center">字符常量</td>
<td align="center">单引号引起来,只能写一个字符，也可以不写</td>
<td align="center">‘a’、’’、’牛’</td>
</tr>
<tr>
<td align="center">字符串常量</td>
<td align="center">双引号引起来,可以写多个字符,也可以不写</td>
<td align="center">“a”、”666”、”你好吗？”、””</td>
</tr>
<tr>
<td align="center">布尔常量</td>
<td align="center">只有两个值：true、false（流程控制中讲解）</td>
<td align="center">true、false</td>
</tr>
<tr>
<td align="center">空常量</td>
<td align="center">只有一个值（引用数据类型中讲解）</td>
<td align="center">null</td>
</tr>
</tbody></table>
<h2 id="4-3、练习"><a href="#4-3、练习" class="headerlink" title="4.3、练习"></a>4.3、练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求：输出各种类型的常量	</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantDemo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//输出整数常量</span></span><br><span class="line">    System.out.println(<span class="number">123</span>);</span><br><span class="line">    <span class="comment">//输出小数常量</span></span><br><span class="line">    System.out.println(<span class="number">0.125</span>);</span><br><span class="line">    <span class="comment">//输出字符常量</span></span><br><span class="line">    System.out.println(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">    <span class="comment">//输出布尔常量</span></span><br><span class="line">    System.out.println(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//输出字符串常量</span></span><br><span class="line">    System.out.println(<span class="string">&quot;你好Java&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第五章、变量"><a href="#第五章、变量" class="headerlink" title="第五章、变量"></a>第五章、变量</h1><h2 id="5-1、什么是变量"><a href="#5-1、什么是变量" class="headerlink" title="5.1、什么是变量"></a>5.1、什么是变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在程序运行过程中会发生改变的量被称为变量</span><br><span class="line">一个变量每次只能保存一个数据，必须要明确保存的数据类型</span><br></pre></td></tr></table></figure>

<h2 id="5-2、变量的定义"><a href="#5-2、变量的定义" class="headerlink" title="5.2、变量的定义"></a>5.2、变量的定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）定义变量的格式：</span><br><span class="line">  数据类型 变量名 = 变量值;</span><br><span class="line"><span class="number">2</span>）注意	</span><br><span class="line">  <span class="keyword">long</span>类型：建议数据后加L表示。</span><br><span class="line">  <span class="keyword">float</span>类型：建议数据后加F表示。</span><br><span class="line"><span class="number">3</span>）注意⚠️</span><br><span class="line">  变量名称：在同一个大括号范围内，变量的名字不可以相同。</span><br><span class="line">  变量赋值：定义的变量，不赋值不能使用</span><br></pre></td></tr></table></figure>

<h2 id="5-3、练习"><a href="#5-3、练习" class="headerlink" title="5.3、练习"></a>5.3、练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义字节型变量</span></span><br><span class="line">    <span class="keyword">byte</span> b = <span class="number">100</span>;</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    <span class="comment">//定义短整型变量</span></span><br><span class="line">    <span class="keyword">short</span> s = <span class="number">1000</span>;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    <span class="comment">//定义整型变量</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">123456</span>;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="comment">//定义长整型变量</span></span><br><span class="line">    <span class="keyword">long</span> l = <span class="number">12345678900L</span>;</span><br><span class="line">    System.out.println(l);</span><br><span class="line">    <span class="comment">//定义单精度浮点型变量</span></span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">5.5F</span>;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">    <span class="comment">//定义双精度浮点型变量</span></span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">8.5</span>;</span><br><span class="line">    System.out.println(d);</span><br><span class="line">    <span class="comment">//定义布尔型变量</span></span><br><span class="line">    <span class="keyword">boolean</span> bool = <span class="keyword">false</span>;</span><br><span class="line">    System.out.println(bool);</span><br><span class="line">    <span class="comment">//定义字符型变量</span></span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>培训学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>day02-类型转换-运算符-码表-方法-流程结构</title>
    <url>/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><strong><em>今日学习内容：数据类型转换、算数运算符、比较运算符、逻辑运算符、三元运算符、码表、方法的定义及调用、流程控制结构。</em></strong></p>
<span id="more"></span>

<h1 id="第一章、数据类型转换"><a href="#第一章、数据类型转换" class="headerlink" title="第一章、数据类型转换"></a>第一章、数据类型转换</h1><h2 id="1-1什么是数据类型转换"><a href="#1-1什么是数据类型转换" class="headerlink" title="1.1什么是数据类型转换"></a>1.1什么是数据类型转换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型的转换</span><br></pre></td></tr></table></figure>

<h2 id="1-2、自动转换"><a href="#1-2、自动转换" class="headerlink" title="1.2、自动转换"></a>1.2、自动转换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">byte</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span> j = b + i;</span><br><span class="line">  System.out.println(j);</span><br><span class="line">&#125;</span><br><span class="line">⚠️自动转换：将 取值范围小的类型 自动提升为 取值范围大的类型</span><br><span class="line">⚠️转换规则：</span><br><span class="line">  范围小的类型向范围大的类型提升， <span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span> 运算时直接提升为 <span class="keyword">int</span> </span><br><span class="line">	<span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span>‐‐&gt;<span class="keyword">int</span>‐‐&gt;<span class="keyword">long</span>‐‐&gt;<span class="keyword">float</span>‐‐&gt;<span class="keyword">double</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2.png" alt="自动转换"></p>
<h2 id="1-3、强制转换"><a href="#1-3、强制转换" class="headerlink" title="1.3、强制转换"></a>1.3、强制转换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">⚠️强制类型转换：将 取值范围大的类型 强制转换成 取值范围小的类型</span><br><span class="line">    转换格式：数据类型 变量名 = （数据类型）被转数据</span><br><span class="line">  </span><br><span class="line">⚠️区别：自动转换是Java自动执行的，而强制转换需要我们自己手动执行</span><br><span class="line">  </span><br><span class="line">⚠️浮点转成整数，直接取消小数点，可能造成数据损失精度。</span><br><span class="line">⚠️<span class="keyword">int</span> 强制转成 <span class="keyword">short</span> 砍掉<span class="number">2</span>个字节，可能造成数据丢失</span><br></pre></td></tr></table></figure>

<h2 id="1-4、ASCII码表"><a href="#1-4、ASCII码表" class="headerlink" title="1.4、ASCII码表"></a>1.4、ASCII码表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">⚠️在计算机的内部都是二进制的<span class="number">0</span>、<span class="number">1</span>数据，如何让计算机可以直接识别人类文字的问题呢？就产生出了编码表的概念</span><br><span class="line">⚠️编码表 ：就是将人类的文字和一个十进制数进行对应起来组成一张表格</span><br></pre></td></tr></table></figure>

<h1 id="第二章、运算符"><a href="#第二章、运算符" class="headerlink" title="第二章、运算符"></a>第二章、运算符</h1><h2 id="2-1、算术运算符"><a href="#2-1、算术运算符" class="headerlink" title="2.1、算术运算符"></a>2.1、算术运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">+				加法、字符串拼接（数字就加法，字符串就是拼接）</span><br><span class="line">-				减法</span><br><span class="line">*				乘法</span><br><span class="line">/				除法</span><br><span class="line">%				取模（取余：两个数相除取余数）</span><br><span class="line">++			自增（基于自身加<span class="number">1</span>）</span><br><span class="line">--			自减（基于自身减<span class="number">1</span>）</span><br></pre></td></tr></table></figure>

<h2 id="2-2、赋值运算符"><a href="#2-2、赋值运算符" class="headerlink" title="2.2、赋值运算符"></a>2.2、赋值运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">= 			赋值符号（将符号右边的值，赋给左边的变量）</span><br><span class="line">+= 			加等于 a += ;  a = a + </span><br><span class="line">-= 			减等于</span><br><span class="line">*= 			乘等于</span><br><span class="line">/= 			除等于</span><br><span class="line">%= 			模等于</span><br></pre></td></tr></table></figure>

<h2 id="2-2-1、-思考题"><a href="#2-2-1、-思考题" class="headerlink" title="2.2.1、+=思考题"></a>2.2.1、+=思考题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）下面的程序有问题吗？</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line">    s += <span class="number">1</span>; </span><br><span class="line">    System.out.println(s);</span><br><span class="line">	&#125;</span><br><span class="line">⚠️分析： s += <span class="number">1</span> 逻辑上看作是 s = s + <span class="number">1</span> 计算结果被提升为<span class="keyword">int</span>类型，再向<span class="keyword">short</span>类型赋值时发生错误，因为不能将取值范围大的类型赋值到取值范围小的类型。</span><br><span class="line">    但是， s = s + <span class="number">1</span> 进行两次运算 ， += 是一个运算符，只运算一次，并带有强制转换的特点，也就是说 s += <span class="number">1</span> 就是 s = (<span class="keyword">short</span>)(s + <span class="number">1</span>) ，因此程序没有问题编译通过，运行结果是<span class="number">2.</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/%E6%80%9D%E8%80%83%E9%A2%981.png" alt="思考题1"></p>
<p><strong style="color:red">+=  是一个整体的运算符，带有强制转换特点。</strong></p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>）下面的程序有问题吗？</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> b1=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> b2=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">byte</span> b3=<span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">byte</span> b4=b1 + b2;</span><br><span class="line">    System.out.println(b3);</span><br><span class="line">    System.out.println(b4);</span><br><span class="line">	&#125;</span><br><span class="line">⚠️分析： b3 = <span class="number">1</span> + <span class="number">2</span> ， <span class="number">1</span> 和 <span class="number">2</span> 是常量，为固定不变的数据，在编译的时候（编译器javac），已经确定了 <span class="number">1</span>+<span class="number">2</span> 的结果并没有超过<span class="keyword">byte</span>类型的取值范围，可以赋值给变量 b3 ，因此 b3=<span class="number">1</span> + <span class="number">2</span> 是正确的。</span><br><span class="line">	反之， b4 = b2 + b3 ， b2 和 b3 是变量，变量的值是可能变化的，在编译的时候，编译器javac不确定b2+b3的结果是什么，因此会将结果以<span class="keyword">int</span>类型进行处理，所以<span class="keyword">int</span>类型不能赋值给<span class="keyword">byte</span>类型，因此编译失败</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/%E6%80%9D%E8%80%83%E9%A2%982.png" alt="思考题2"></p>
<p><strong style="color:red">变量运算时，编译为 int 类型;</strong></p>
<p><strong style="color:red">常量运算时，编译为常量类型。</strong></p>
<h2 id="2-3、比较运算符"><a href="#2-3、比较运算符" class="headerlink" title="2.3、比较运算符"></a>2.3、比较运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">⚠️比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值 <span class="keyword">true</span> 或者 <span class="keyword">false</span> </span><br><span class="line">  </span><br><span class="line">== 			比较符号两边数据是否相等，相等结果是<span class="keyword">true</span></span><br><span class="line">&lt; 			比较符号左边的数据是否小于右边的数据，如果小于结果是<span class="keyword">true</span></span><br><span class="line">&gt; 			比较符号左边的数据是否大于右边的数据，如果大于结果是<span class="keyword">true</span></span><br><span class="line">&lt;= 			比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是<span class="keyword">true</span></span><br><span class="line">&gt;= 			比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是<span class="keyword">true</span></span><br><span class="line">!=		  	不等于符号 ，如果符号两边的数据不相等，结果是<span class="keyword">true</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">boolean</span> is =  <span class="number">1</span> != <span class="number">2</span>;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p><strong style="color:red">==  符号在处理基本数据类型时，比较的是两边的值；而在处理引用类型时，比较的是地址。</strong></p>
<h2 id="2-4、逻辑运算符"><a href="#2-4、逻辑运算符" class="headerlink" title="2.4、逻辑运算符"></a>2.4、逻辑运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">⚠️逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值 <span class="keyword">true</span> 或者 <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">&amp;&amp; 短路与</span><br><span class="line">  <span class="number">1.</span> 两边都是<span class="keyword">true</span>，结果是<span class="keyword">true</span></span><br><span class="line">  <span class="number">2.</span> 一边是<span class="keyword">false</span>，结果是<span class="keyword">false</span></span><br><span class="line">  短路特点：符号左边是<span class="keyword">false</span>，右边不再运算</span><br><span class="line">|| 短路或</span><br><span class="line">  <span class="number">1.</span> 两边都是<span class="keyword">false</span>，结果是<span class="keyword">false</span></span><br><span class="line">  <span class="number">2.</span> 一边是<span class="keyword">true</span>，结果是<span class="keyword">true</span></span><br><span class="line">  短路特点： 符号左边是<span class="keyword">true</span>，右边不再运算</span><br><span class="line">！ 取反</span><br><span class="line">  <span class="number">1.</span> !<span class="keyword">true</span> 	结果是<span class="keyword">false</span></span><br><span class="line">  <span class="number">2.</span> !<span class="keyword">false</span>	结果是<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h2 id="2-5、三元运算符（三目）"><a href="#2-5、三元运算符（三目）" class="headerlink" title="2.5、三元运算符（三目）"></a>2.5、三元运算符（三目）</h2><p>三元运算符格式：<br>  数据类型 变量名 = 布尔类型表达式 ？结果1：结果2;<br>三元运算符计算方式：<br>    布尔类型表达式结果是true，三元运算符整体结果为结果1，赋值给变量<br>    布尔类型表达式结果是false，三元运算符整体结果为结果2，赋值给变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = (<span class="number">1</span>==<span class="number">2</span> ? <span class="number">100</span> : <span class="number">200</span>);</span><br><span class="line">  System.out.println(i);<span class="comment">//200</span></span><br><span class="line">  <span class="keyword">int</span> j = (<span class="number">3</span>&lt;=<span class="number">4</span> ? <span class="number">500</span> : <span class="number">600</span>);</span><br><span class="line">  System.out.println(j);<span class="comment">//500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/%E4%B8%89%E7%9B%AE.png" alt="三目"></p>
<h1 id="第三章、方法入门"><a href="#第三章、方法入门" class="headerlink" title="第三章、方法入门"></a>第三章、方法入门</h1><h2 id="3-1、什么是方法"><a href="#3-1、什么是方法" class="headerlink" title="3.1、什么是方法"></a>3.1、什么是方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java语言中的“方法”（Method）在其他语言当中也可能被称为“函数”（Function）。对于一些复杂的代码逻辑，如果希望重复使用这些代码，并且做到“随时任意使用”，那么就可以将这些代码放在一个大括号“&#123;&#125;”当中，并且起一个名字。使用代码的时候，直接找到名字调用即可</span><br></pre></td></tr></table></figure>

<h2 id="3-2、方法的定义"><a href="#3-2、方法的定义" class="headerlink" title="3.2、方法的定义"></a>3.2、方法的定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">定义方法的格式：</span><br><span class="line">  修饰符 返回值类型 方法名 （参数列表）｛</span><br><span class="line">		代码...</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	｝</span><br><span class="line">解释：</span><br><span class="line">	修饰符：目前固定写法 <span class="keyword">public</span> <span class="keyword">static</span>   </span><br><span class="line">  返回值类型：目前固定写法 <span class="keyword">void</span> ，其他返回值类型在后面的课程讲解</span><br><span class="line">	方法名：为我们定义的方法起名，满足标识符的规范，用来调用方法</span><br><span class="line">	参数列表：目前无参数，带有参数的方法在后面的课程讲解</span><br><span class="line">	<span class="keyword">return</span>：方法结束，因为返回值类型是<span class="keyword">void</span>，方法大括号内的<span class="keyword">return</span>可以不写</span><br><span class="line">举例：</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;这是一个方法&quot;</span>);</span><br><span class="line">  	&#125;	</span><br></pre></td></tr></table></figure>

<h2 id="3-3、方法的调用"><a href="#3-3、方法的调用" class="headerlink" title="3.3、方法的调用"></a>3.3、方法的调用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">⚠️方法在定义完毕后，方法不会自己运行，必须被调用才能执行，我们可以在主方法main中来调用我们自己定义好的方法。在</span><br><span class="line">主方法中，直接写要调用的方法名字就可以调用了</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用定义的方法method</span></span><br><span class="line">    method();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义方法，被main方法调用</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	System.out.println(<span class="string">&quot;自己定义的方法，需要被main方法调用才能运行&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-4、调用练习"><a href="#3-4、调用练习" class="headerlink" title="3.4、调用练习"></a>3.4、调用练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">将三元运算符代码抽取到自定义的方法中，并调用。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//调用定义的方法operator</span></span><br><span class="line">  operator();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义方法，方法中定义三元运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  i = (<span class="number">1</span>==<span class="number">2</span> ? <span class="number">100</span>:<span class="number">200</span>);</span><br><span class="line">  System.out.println(i);</span><br><span class="line">  <span class="keyword">int</span> j = <span class="number">0</span> ;	</span><br><span class="line">  j = (<span class="number">3</span>&lt;=<span class="number">4</span> ? <span class="number">500</span>:<span class="number">600</span>);</span><br><span class="line">  System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/%E8%B0%83%E7%94%A8%E7%BB%83%E4%B9%A0.png" alt="调用练习"></p>
<h2 id="3-5、注意事项"><a href="#3-5、注意事项" class="headerlink" title="3.5、注意事项"></a>3.5、注意事项</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法定义注意事项：</span><br><span class="line">  方法必须定义在类中方法外</span><br><span class="line">	方法不能定义在另一个方法的里面</span><br><span class="line">⚠️正确案例</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//正确写法，类中，main方法外面可以定义方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">⚠️错误案例</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//错误写法，一个方法不能定义在另一方法内部</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第四章、流程控制"><a href="#第四章、流程控制" class="headerlink" title="第四章、流程控制"></a>第四章、流程控制</h1><h2 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h2><p>代码执行的顺序会影响程序的运行结果，所以我们可以通过流程控制语句来控制我们代码的执行顺序或条件执行，从而达到我们想要的效果。</p>
<h2 id="1-2、顺序结构"><a href="#1-2、顺序结构" class="headerlink" title="1.2、顺序结构"></a>1.2、顺序结构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  <span class="comment">//顺序执行，根据编写的顺序，从上到下运行</span></span><br><span class="line">  System.out.println(<span class="number">1</span>);</span><br><span class="line">  System.out.println(<span class="number">2</span>);</span><br><span class="line">  System.out.println(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第五章、判断语句"><a href="#第五章、判断语句" class="headerlink" title="第五章、判断语句"></a>第五章、判断语句</h1><h2 id="2-1、if"><a href="#2-1、if" class="headerlink" title="2.1、if"></a>2.1、if</h2><h3 id="2-1-1、if格式"><a href="#2-1-1、if格式" class="headerlink" title="2.1.1、if格式"></a>2.1.1、if格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">   语句体；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">  <span class="comment">// 判断两个数大小</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  	<span class="comment">// 定义变量</span></span><br><span class="line">  	<span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">  	<span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">  	<span class="keyword">if</span>( a &gt; b )&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;a &gt; b&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/if%E8%B0%83%E7%94%A8.png" alt="if调用"></p>
<h3 id="2-1-2、执行流程"><a href="#2-1-2、执行流程" class="headerlink" title="2.1.2、执行流程"></a>2.1.2、执行流程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）首先判断关系表达式看其结果是<span class="keyword">true</span>还是<span class="keyword">false</span></span><br><span class="line"><span class="number">2</span>）如果是<span class="keyword">true</span>就执行语句体</span><br><span class="line"><span class="number">3</span>）如果是<span class="keyword">false</span>就不执行语句体,往下接着执行</span><br></pre></td></tr></table></figure>

<img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/2019-12-14_11-26-06.jpg" alt="2019-12-14_11-26-06" style="zoom:33%;">

<h2 id="2-2、if…else"><a href="#2-2、if…else" class="headerlink" title="2.2、if…else"></a>2.2、if…else</h2><h3 id="2-2-1、格式"><a href="#2-2-1、格式" class="headerlink" title="2.2.1、格式"></a>2.2.1、格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( 关系表达式 ) &#123;</span><br><span class="line">   语句体<span class="number">1</span>；</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   语句体<span class="number">2</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">  <span class="comment">// 判断奇偶数</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  	<span class="comment">// 定义变量</span></span><br><span class="line">  	<span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">  	<span class="keyword">if</span>( num % <span class="number">2</span> == <span class="number">0</span> )&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;num 是偶数&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;num 是奇数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  	System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/ifelse.png" alt="ifelse"></p>
<h3 id="2-2-2、执行流程"><a href="#2-2-2、执行流程" class="headerlink" title="2.2.2、执行流程"></a>2.2.2、执行流程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）首先判断关系表达式看其结果是<span class="keyword">true</span>还是<span class="keyword">false</span></span><br><span class="line"><span class="number">2</span>）如果是<span class="keyword">true</span>就执行语句体<span class="number">1</span></span><br><span class="line"><span class="number">3</span>）如果是<span class="keyword">false</span>就执行语句体<span class="number">2</span></span><br></pre></td></tr></table></figure>

<img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/2019-12-14_11-34-15.jpg" alt="2019-12-14_11-34-15" style="zoom:33%;">

<h2 id="2-3、if…else-if…else"><a href="#2-3、if…else-if…else" class="headerlink" title="2.3、if…else if…else"></a>2.3、if…else if…else</h2><h3 id="2-3-1、格式"><a href="#2-3-1、格式" class="headerlink" title="2.3.1、格式"></a>2.3.1、格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">	语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">	语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (关系表达式n) &#123;</span><br><span class="line">	语句体n;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// x和y的关系满足如下：</span></span><br><span class="line">    <span class="comment">// x&gt;=3 y = 2x + 1;</span></span><br><span class="line">    <span class="comment">//‐1&lt;=x&lt;3 y = 2x;</span></span><br><span class="line">    <span class="comment">// x&lt;=‐1 y = 2x – 1;</span></span><br><span class="line">    <span class="comment">// 根据给定的x的值，计算出y的值并输出。</span></span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;= <span class="number">3</span>) &#123;</span><br><span class="line">   		 y = <span class="number">2</span> * x + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt;= ‐<span class="number">1</span> &amp;&amp; x &lt; <span class="number">3</span>) &#123;</span><br><span class="line">   		 y = <span class="number">2</span> * x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   		 y = <span class="number">2</span> * x ‐ <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;y的值是：&quot;</span>+y);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/elseif.png" alt="elseif"></p>
<h3 id="2-3-2、执行流程"><a href="#2-3-2、执行流程" class="headerlink" title="2.3.2、执行流程"></a>2.3.2、执行流程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）首先判断关系表达式<span class="number">1</span>看其结果是<span class="keyword">true</span>还是<span class="keyword">false</span></span><br><span class="line"><span class="number">2</span>）如果是<span class="keyword">true</span>就执行语句体<span class="number">1</span></span><br><span class="line"><span class="number">3</span>）如果是<span class="keyword">false</span>就继续判断关系表达式<span class="number">2</span>看其结果是<span class="keyword">true</span>还是<span class="keyword">false</span></span><br><span class="line"><span class="number">4</span>）如果是<span class="keyword">true</span>就执行语句体<span class="number">2</span></span><br><span class="line"><span class="number">5</span>）如果是<span class="keyword">false</span>就继续判断关系表达式…看其结果是<span class="keyword">true</span>还是<span class="keyword">false</span></span><br><span class="line">…</span><br><span class="line"><span class="number">6</span>）如果没有任何关系表达式为<span class="keyword">true</span>，就执行语句体n+<span class="number">1</span></span><br></pre></td></tr></table></figure>

<img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/2019-12-14_11-42-58.jpg" alt="2019-12-14_11-42-58" style="zoom:33%;">

<h2 id="2-4、练习"><a href="#2-4、练习" class="headerlink" title="2.4、练习"></a>2.4、练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定考试成绩，判断学生等级</span></span><br><span class="line">  <span class="number">90</span>-<span class="number">100</span> 优秀</span><br><span class="line">  <span class="number">80</span>-<span class="number">89</span> 好</span><br><span class="line">  <span class="number">70</span>-<span class="number">79</span> 良</span><br><span class="line">  <span class="number">60</span>-<span class="number">69</span> 及格</span><br><span class="line">  <span class="number">60</span>以下 不及格</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> score = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>)&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;你的成绩是错误的&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">90</span> &amp;&amp; score&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;你的成绩属于优秀&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span> &amp;&amp; score&lt;<span class="number">90</span>)&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;你的成绩属于好&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span> &amp;&amp; score&lt;<span class="number">80</span>)&#123;</span><br><span class="line">   	 	System.out.println(<span class="string">&quot;你的成绩属于良&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span> &amp;&amp; score&lt;<span class="number">70</span>)&#123;</span><br><span class="line">   	 	System.out.println(<span class="string">&quot;你的成绩属于及格&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;你的成绩属于不及格&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/score.png" alt="score"></p>
<h2 id="2-5、if语句与三元运算的互换"><a href="#2-5、if语句与三元运算的互换" class="headerlink" title="2.5、if语句与三元运算的互换"></a>2.5、if语句与三元运算的互换</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在某些简单的应用中，if语句是可以和三元运算符互换使用的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">  <span class="comment">//定义变量，保存a和b的较大值</span></span><br><span class="line">  <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">  	c = a;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  	c = b;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//上述功能可以改写为三元运算符形式：c = a &gt; b ? a:b;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// d = a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b : c);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第六章、选择语句"><a href="#第六章、选择语句" class="headerlink" title="第六章、选择语句"></a>第六章、选择语句</h1><h2 id="3-1、switch语句格式"><a href="#3-1、switch语句格式" class="headerlink" title="3.1、switch语句格式"></a>3.1、switch语句格式</h2><p>switch语句中，表达式的数据类型，不可以是 boolean , long , float , double .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// switch语句中，表达式的数据类型，可以是byte，short，int，char，enum（枚举），JDK7后可以接收字符串</span></span><br><span class="line"><span class="keyword">switch</span>(表达式) &#123;</span><br><span class="line">  <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">  	语句体<span class="number">1</span>;</span><br><span class="line">  	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义变量，判断是星期几</span></span><br><span class="line">    <span class="keyword">int</span> weekday = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">//switch语句实现选择</span></span><br><span class="line">    <span class="keyword">switch</span>(weekday) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的数字有误&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/switch.png" alt="switch"></p>
<h2 id="3-2、switch执行流程"><a href="#3-2、switch执行流程" class="headerlink" title="3.2、switch执行流程"></a>3.2、switch执行流程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）首先计算出表达式的值</span><br><span class="line"><span class="number">2</span>）其次，和<span class="keyword">case</span>依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到<span class="keyword">break</span>就会结束。</span><br><span class="line"><span class="number">3</span>）最后，如果所有的<span class="keyword">case</span>都和表达式的值不匹配，就会执行<span class="keyword">default</span>语句体部分，然后程序结束掉</span><br></pre></td></tr></table></figure>

<img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/2019-12-14_11-54-25.jpg" alt="2019-12-14_11-54-25" style="zoom:33%;">

<h2 id="3-3、case的穿透"><a href="#3-3、case的穿透" class="headerlink" title="3.3、case的穿透"></a>3.3、case的穿透</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">⚠️在<span class="keyword">switch</span>语句中，如果<span class="keyword">case</span>的后面不写<span class="keyword">break</span>，将出现穿透现象，也就是不会在判断下一个<span class="keyword">case</span>的值，直接向后运</span><br><span class="line">行，直到遇到<span class="keyword">break</span>，或者整体<span class="keyword">switch</span>结束</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;执行case0&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;执行case5&quot;</span>);</span><br><span class="line">      <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;执行case10&quot;</span>);</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">      	System.out.println(<span class="string">&quot;执行default&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">⚠️分析：上述程序中，执行case5后，由于没有<span class="keyword">break</span>语句，程序会一直向后走，不会在判断<span class="keyword">case</span>，也不会理会<span class="keyword">break</span>，直接</span><br><span class="line">运行完整体<span class="keyword">switch</span>。</span><br><span class="line">由于<span class="keyword">case</span>存在穿透性，因此初学者在编写<span class="keyword">switch</span>语句时，必须要写上<span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/08/day02-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-%E8%BF%90%E7%AE%97%E7%AC%A6-%E7%A0%81%E8%A1%A8-%E6%96%B9%E6%B3%95-%E6%B5%81%E7%A8%8B%E7%BB%93%E6%9E%84/case%E7%A9%BF%E9%80%8F.png" alt="case穿透"></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>培训学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>day04-面向对象-类-对象</title>
    <url>/2021/04/12/day04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%B1%BB-%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p><strong><em>今日内容：面向对象、类、对象。</em></strong></p>
<span id="more"></span>

<h1 id="第一章、面向对象思想（OOP）"><a href="#第一章、面向对象思想（OOP）" class="headerlink" title="第一章、面向对象思想（OOP）"></a>第一章、面向对象思想（OOP）</h1><h2 id="1-1、面向对象思想概述"><a href="#1-1、面向对象思想概述" class="headerlink" title="1.1、面向对象思想概述"></a>1.1、面向对象思想概述</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 概述</span></span><br><span class="line">	Java语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下，使用Java语言去设计、开发计算机程序。 这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想。 它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去操作实现</span><br><span class="line"><span class="comment">// 举例</span></span><br><span class="line">洗衣服:</span><br><span class="line">	面向过程：把衣服脱下来--&gt;找个盆--&gt;放点洗衣粉--&gt;加点水--&gt;浸泡几分钟--&gt;揉揉--&gt;清洗衣服--&gt;拧干--&gt;晾起来</span><br><span class="line">	面向对象：把衣服脱下来--&gt;打开全自动洗衣机--&gt;扔衣服--&gt;按钮--&gt;晾起来</span><br><span class="line">区别：</span><br><span class="line">	面向过程：强调步骤</span><br><span class="line">	面向对象：强调对象，这里的对象就是洗衣机</span><br><span class="line"><span class="comment">// 特点</span></span><br><span class="line">  面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。面向对象的语言中，包含了三大基本特征：封装、继承、多态</span><br></pre></td></tr></table></figure>

<h2 id="1-2、类和对象"><a href="#1-2、类和对象" class="headerlink" title="1.2、类和对象"></a>1.2、类和对象</h2><h3 id="1-2-1、什么是类"><a href="#1-2-1、什么是类" class="headerlink" title="1.2.1、什么是类"></a>1.2.1、什么是类</h3><p><strong style="color:red">类：是一组相关属性和行为的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物</strong></p>
<p>现实中，描述一类事物：<br>    属性：就是该事物的状态信息<br>    行为：就是该事物能够做什么</p>
<p>举例：小猫<br>        属性：名字、体重、年龄、颜色…<br>          行为：跑、叫、睡、吃…</p>
<h3 id="1-2-2、什么是对象"><a href="#1-2-2、什么是对象" class="headerlink" title="1.2.2、什么是对象"></a>1.2.2、什么是对象</h3><p><strong style="color:red">对象：是一类事物的具体体现。对象是类的一个实例，必然具备该类事物的属性和行为</strong><br>现实中，一类事物的一个实例：一只小猫</p>
<p>举例：一只小猫。<br>属性：tom、5kg、2 years、yellow…<br>行为：慢悠悠的跑、温柔的叫、呼呼大睡…</p>
<h3 id="1-2-3、类与对象的关系"><a href="#1-2-3、类与对象的关系" class="headerlink" title="1.2.3、类与对象的关系"></a>1.2.3、类与对象的关系</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）类是对一类事物的描述，是抽象的</span><br><span class="line"><span class="number">2</span>）对象是一类事物的实例，是具体的</span><br><span class="line"><span class="number">3</span>）类是对象的模板，对象是类的实例</span><br></pre></td></tr></table></figure>

<h2 id="1-3、类的定义"><a href="#1-3、类的定义" class="headerlink" title="1.3、类的定义"></a>1.3、类的定义</h2><h3 id="1-3-1、事物与类的对比"><a href="#1-3-1、事物与类的对比" class="headerlink" title="1.3.1、事物与类的对比"></a>1.3.1、事物与类的对比</h3><p>现实世界的一类事物：<br>          属性：事物的状态信息<br>          行为：事物能够做什么</p>
<p>Java中用class描述事物也是如此：<br>          成员变量：对应事物的属性<br>          成员方法：对应事物的行为</p>
<h3 id="1-3-2、类的定义格式"><a href="#1-3-2、类的定义格式" class="headerlink" title="1.3.2、类的定义格式"></a>1.3.2、类的定义格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span> </span>&#123;</span><br><span class="line">  <span class="comment">//成员变量</span></span><br><span class="line">  <span class="comment">//成员方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分析：</span></span><br><span class="line">	定义类：  就是定义类的成员，包括成员变量和成员方法。</span><br><span class="line">	成员变量：和以前定义变量几乎是一样的。只不过位置发生了改变。在类中，方法外</span><br><span class="line">	成员方法：和以前定义方法几乎是一样的。只不过把<span class="keyword">static</span>去掉，<span class="keyword">static</span>的作用在面向对象后面课程中再详细讲解</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        <span class="comment">//成员变量</span></span><br><span class="line">        String name；<span class="comment">//姓名</span></span><br><span class="line">        <span class="keyword">int</span> age；<span class="comment">//年龄</span></span><br><span class="line">          <span class="comment">//成员方法</span></span><br><span class="line">        <span class="comment">//学习的方法</span></span><br><span class="line">        <span class="function">publicvoid <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        		System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//吃饭的方法</span></span><br><span class="line">        <span class="function">publicvoid <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        		System.out.println(<span class="string">&quot;学习饿了要吃饭&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4、对象的使用"><a href="#1-4、对象的使用" class="headerlink" title="1.4、对象的使用"></a>1.4、对象的使用</h2><h3 id="1-4-1、对象的使用格式"><a href="#1-4-1、对象的使用格式" class="headerlink" title="1.4.1、对象的使用格式"></a>1.4.1、对象的使用格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">	类名 对象名 = <span class="keyword">new</span> 类名();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用对象访问类中的成员</span></span><br><span class="line">	对象名.成员变量；</span><br><span class="line">	对象名.成员方法()；</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="comment">// 定义学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;学习饿了要吃饭&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01_Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//创建对象格式：类名 对象名 = new 类名();</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(<span class="string">&quot;s:&quot;</span>+s); <span class="comment">//cn.hjm.Student@100363</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//直接输出成员变量值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+s.name); <span class="comment">//null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span>+s.age); <span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//给成员变量赋值</span></span><br><span class="line">        s.name = <span class="string">&quot;赵丽颖&quot;</span>;</span><br><span class="line">        s.age = <span class="number">18</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//再次输出成员变量的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span>+s.name); <span class="comment">//赵丽颖</span></span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span>+s.age); <span class="comment">//18</span></span><br><span class="line">        System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//调用成员方法</span></span><br><span class="line">        s.study(); <span class="comment">// &quot;好好学习，天天向上&quot;</span></span><br><span class="line">        s.eat(); <span class="comment">// &quot;学习饿了要吃饭&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-2、成员变量的默认值"><a href="#1-4-2、成员变量的默认值" class="headerlink" title="1.4.2、成员变量的默认值"></a>1.4.2、成员变量的默认值</h3><table>
<thead>
<tr>
<th></th>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>基本类型</td>
<td>整数（byte，short，int，long)</td>
<td>0</td>
</tr>
<tr>
<td>…</td>
<td>浮点数（float，double)</td>
<td>0.0</td>
</tr>
<tr>
<td>…</td>
<td>字符（char)</td>
<td>‘\u0000’</td>
</tr>
<tr>
<td>…</td>
<td>布尔（boolean)</td>
<td>false</td>
</tr>
<tr>
<td>引用类型</td>
<td>数组，类，接口</td>
<td>null</td>
</tr>
</tbody></table>
<h2 id="1-5、类与对象的练习"><a href="#1-5、类与对象的练习" class="headerlink" title="1.5、类与对象的练习"></a>1.5、类与对象的练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义手机类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    String brand; <span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">int</span> price; <span class="comment">//价格</span></span><br><span class="line">    String color; <span class="comment">//颜色</span></span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="comment">//打电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    		System.out.println(<span class="string">&quot;给&quot;</span>+name+<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//发短信</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    		System.out.println(<span class="string">&quot;群发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//输出成员变量值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;品牌：&quot;</span>+p.brand);<span class="comment">//null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;价格：&quot;</span>+p.price);<span class="comment">//0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;颜色：&quot;</span>+p.color);<span class="comment">//null</span></span><br><span class="line">        System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//给成员变量赋值</span></span><br><span class="line">        p.brand = <span class="string">&quot;锤子&quot;</span>;</span><br><span class="line">        p.price = <span class="number">2999</span>;</span><br><span class="line">        p.color = <span class="string">&quot;棕色&quot;</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//再次输出成员变量值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;品牌：&quot;</span>+p.brand);<span class="comment">//锤子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;价格：&quot;</span>+p.price);<span class="comment">//2999</span></span><br><span class="line">        System.out.println(<span class="string">&quot;颜色：&quot;</span>+p.color);<span class="comment">//棕色</span></span><br><span class="line">        System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//调用成员方法</span></span><br><span class="line">        p.call(<span class="string">&quot;紫霞&quot;</span>);</span><br><span class="line">        p.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="今日作业："><a href="#今日作业：" class="headerlink" title="今日作业："></a>今日作业：</h2><h6 id="Phone-类"><a href="#Phone-类" class="headerlink" title="Phone 类:"></a>Phone 类:</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id; <span class="comment">//编号</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//手机名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price; <span class="comment">//价格</span></span><br><span class="line">    <span class="keyword">private</span> String color;   <span class="comment">//颜色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(<span class="keyword">long</span> number)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;给&quot;</span>+ number + <span class="string">&quot;打电话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">(String messge)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消息为：&quot;</span> + messge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>main 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Phone ph=<span class="keyword">new</span> Phone();</span><br><span class="line">    ph.setId(<span class="string">&quot;#123412&quot;</span>);</span><br><span class="line">    ph.setName(<span class="string">&quot;华为p20 pro&quot;</span>);</span><br><span class="line">    ph.setColor(<span class="string">&quot;火焰红&quot;</span>);</span><br><span class="line">    ph.setPrice(<span class="number">2800.00</span>);</span><br><span class="line">    ph.call(<span class="number">1234567890</span>);</span><br><span class="line">    ph.message(<span class="string">&quot;这是一条信息&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;手机类型为：&quot;</span> + ph.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;手机颜色为：&quot;</span> + ph.getColor());</span><br><span class="line">    System.out.println(<span class="string">&quot;手机价格为：&quot;</span> + ph.getPrice());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行截图：</p>
<p><img src="/2021/04/12/day04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%B1%BB-%E5%AF%B9%E8%B1%A1/phone.png" width="65%"><img src="/2021/04/12/day04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%B1%BB-%E5%AF%B9%E8%B1%A1/phoneMain.png" width="65%"></p>
<h6 id="Animal-类："><a href="#Animal-类：" class="headerlink" title="Animal 类："></a>Animal 类：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String kind;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> weight;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> length;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kind;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKind</span><span class="params">(String kind)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.kind = kind;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">float</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">float</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String massge)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">&quot;说：&quot;</span> + massge);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Animal animal =<span class="keyword">new</span> Animal();</span><br><span class="line">    animal.setKind(<span class="string">&quot;哺乳动物&quot;</span>);</span><br><span class="line">    animal.setName(<span class="string">&quot;大熊猫&quot;</span>);</span><br><span class="line">    animal.setLength(<span class="number">1.65f</span>);</span><br><span class="line">    animal.setWeight(<span class="number">80.5f</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;我叫&quot;</span> + animal.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;我是&quot;</span> + animal.getKind());</span><br><span class="line">    System.out.println(<span class="string">&quot;我的体重是&quot;</span>+ animal.getWeight()+<span class="string">&quot;,我的体长是&quot;</span>+ animal.getLength());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行截图：</p>
<p><img src="/2021/04/12/day04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%B1%BB-%E5%AF%B9%E8%B1%A1/animal.png" width="65%"><img src="/2021/04/12/day04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%B1%BB-%E5%AF%B9%E8%B1%A1/animalMain.png" width="65%"></p>
<h6 id="Person-类"><a href="#Person-类" class="headerlink" title="Person 类"></a>Person 类</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> weight;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> lenght;</span><br><span class="line">    <span class="keyword">private</span> String hobby;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getWeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeight</span><span class="params">(<span class="keyword">float</span> weight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getLenght</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lenght;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLenght</span><span class="params">(<span class="keyword">float</span> lenght)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lenght = lenght;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String hobby)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我要睡觉啦！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>main 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    person.setWeight(<span class="number">60.0f</span>);</span><br><span class="line">    person.setLenght(<span class="number">1.75f</span>);</span><br><span class="line">    person.setHobby(<span class="string">&quot;打篮球、打乒乓球、打游戏&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;我叫&quot;</span> + person.getName());</span><br><span class="line">    System.out.println(<span class="string">&quot;我的体重是&quot;</span> + person.getWeight() + <span class="string">&quot;公斤&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;我的身高是&quot;</span> + person.getLenght() + <span class="string">&quot;米&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;我的兴趣爱好有：&quot;</span>+ person.getHobby());</span><br><span class="line">    person.sleep();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行截图：</p>
<p><img src="/2021/04/12/day04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%B1%BB-%E5%AF%B9%E8%B1%A1/person.png" width="65%"><img src="/2021/04/12/day04-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-%E7%B1%BB-%E5%AF%B9%E8%B1%A1/personMain.png" width="65%"></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>培训学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo初次搭建个人博客</title>
    <url>/2021/04/04/%E5%9F%BA%E4%BA%8EHexo%E5%88%9D%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h6 id="初次搭建博客，基于-hexo-搭建的静态博客。"><a href="#初次搭建博客，基于-hexo-搭建的静态博客。" class="headerlink" title="初次搭建博客，基于 hexo 搭建的静态博客。"></a>初次搭建博客，基于 hexo 搭建的静态博客。</h6><span id="more"></span>

<blockquote>
<p>简介：GitHub Pages 和 Hexo &amp; 原理</p>
<ul>
<li><h4 id="Hexo-是什么？"><a href="#Hexo-是什么？" class="headerlink" title="Hexo 是什么？"></a>Hexo 是什么？</h4><ul>
<li>官网：<a href="https://hexo.io/">hexo.io</a></li>
<li>Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。</li>
</ul>
</li>
<li><h4 id="Hexo-GitHub-文章发布原理"><a href="#Hexo-GitHub-文章发布原理" class="headerlink" title="Hexo + GitHub 文章发布原理"></a>Hexo + GitHub 文章发布原理</h4><ul>
<li><p>在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p>
<p><img src="/2021/04/04/%E5%9F%BA%E4%BA%8EHexo%E5%88%9D%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%8F%91%E6%96%87%E6%B5%81%E7%A8%8B.jpg" alt="发文流程"></p>
</li>
</ul>
</li>
<li><h4 id="优点和不足"><a href="#优点和不足" class="headerlink" title="优点和不足"></a>优点和不足</h4><ul>
<li><strong>优点：</strong>完全免费；静态站点，轻量快速；可按需求自由定制改造；托管在 GitHub，安全省心；迁移方便……</li>
<li><strong>缺点：</strong>发文不便，依赖于本地环境；更适合个人博客使用；GitHub 在国内访问速度有点不快。</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1 准备"></a>1 准备</h2><h3 id="1-1-注意事项"><a href="#1-1-注意事项" class="headerlink" title="1.1 注意事项"></a>1.1 注意事项</h3><ul>
<li><p>该博文使用 Windows 10 搭建；</p>
</li>
<li><p>将文中的 “用户名” 和 “邮箱” 替换为自己的 GitHub 账户名和绑定的邮箱；</p>
</li>
<li><p>统一使用 Git Bash 进行操作（支持 Win、Mac）；</p>
</li>
</ul>
<h3 id="1-2-环境搭建"><a href="#1-2-环境搭建" class="headerlink" title="1.2 环境搭建"></a>1.2 环境搭建</h3><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<ul>
<li>Node.js：<a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li>
<li>Git：<a href="https://link.zhihu.com/?target=https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ul>
<h2 id="2-本地安装-Hexo-博客程序"><a href="#2-本地安装-Hexo-博客程序" class="headerlink" title="2 本地安装 Hexo 博客程序"></a>2 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 MyBlog。打开该文件夹，右键 -&gt; Git Bash Here。</p>
<h3 id="2-1-安装-Hexo"><a href="#2-1-安装-Hexo" class="headerlink" title="2.1 安装 Hexo"></a>2.1 安装 Hexo</h3><p>在 <code>bash</code> 中进入 MyBlog 目录中，使用npm安装 Hexo ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>若安装较慢可以使用淘宝镜像安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/04/%E5%9F%BA%E4%BA%8EHexo%E5%88%9D%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="hexo安装成功"></p>
<h3 id="2-2-Hexo-初始化和本地预览"><a href="#2-2-Hexo-初始化和本地预览" class="headerlink" title="2.2 Hexo 初始化和本地预览"></a>2.2 Hexo 初始化和本地预览</h3><h4 id="初始化并安装所需组件"><a href="#初始化并安装所需组件" class="headerlink" title="初始化并安装所需组件"></a>初始化并安装所需组件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init         <span class="comment">#初始化</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装组件</p>
</blockquote>
<p>​        安装 hexo-asset-image 组件，用来在博客中显示图片。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>​        或者用淘宝镜像安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p> <img src="/2021/04/04/%E5%9F%BA%E4%BA%8EHexo%E5%88%9D%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87%E6%8F%92%E4%BB%B6.png" alt="安装图片插件"></p>
<p>完成后依次输入以下命令，<strong>启动本地服务器进行预览:<br></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g     <span class="comment">#生成页面</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s	   <span class="comment">#启动预览</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/04/%E5%9F%BA%E4%BA%8EHexo%E5%88%9D%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%90%AF%E5%8A%A8%E9%A2%84%E8%A7%88.png" alt="启动预览"></p>
<p><strong>访问<code> http://localhost:4000</code>,出现 Hexo 默认页面，即本地博客安装成功！</strong></p>
<p><img src="/2021/04/04/%E5%9F%BA%E4%BA%8EHexo%E5%88%9D%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E6%9C%AC%E5%9C%B0%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="本地安装成功"></p>
<h2 id="3-部署-Hexo-到-GitHub-Pages"><a href="#3-部署-Hexo-到-GitHub-Pages" class="headerlink" title="3 部署 Hexo 到 GitHub Pages"></a>3 部署 Hexo 到 GitHub Pages</h2><h3 id="3-1-创建GitHub-Pages-仓库"><a href="#3-1-创建GitHub-Pages-仓库" class="headerlink" title="3.1 创建GitHub Pages 仓库"></a>3.1 创建GitHub Pages 仓库</h3><p>登录到GitHub个人主页，选择 New repository:</p>
<p><img src="/2021/04/04/%E5%9F%BA%E4%BA%8EHexo%E5%88%9D%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png" alt="创建仓库"></p>
<p><img src="/2021/04/04/%E5%9F%BA%E4%BA%8EHexo%E5%88%9D%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%9302.jpg" alt="创建仓库02"></p>
<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>
<h3 id="3-2-部署到仓库"><a href="#3-2-部署到仓库" class="headerlink" title="3.2 部署到仓库"></a>3.2 部署到仓库</h3><blockquote>
<p>设置用户名和邮箱</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;GitHub邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建 SSH 密匙：</p>
</blockquote>
<p>输入 <code> ssh-keygen -t rsa -C &quot;GitHub邮箱&quot;</code>，然后一路回车。</p>
<p><strong>添加密匙：</strong></p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<blockquote>
<p>安装 hexo-deployer-git ：</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改配置文件 _config.yml :</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">	<span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">	<span class="attr">repository:</span> <span class="string">https://github.com/用户名/用户名.github.io</span></span><br><span class="line">	<span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>开始生成和部署发布</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g   <span class="comment">#生成页面</span></span><br><span class="line">hexo d   <span class="comment">#部署发布</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>必备技能</tag>
      </tags>
  </entry>
  <entry>
    <title>day05-封装-常用类</title>
    <url>/2021/04/13/day05-%E5%B0%81%E8%A3%85-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p><strong><em>今日内容：对象内存图、封装等</em></strong></p>
<span id="more"></span>

<h2 id="1-6、对象内存图"><a href="#1-6、对象内存图" class="headerlink" title="1.6、对象内存图"></a>1.6、对象内存图</h2><img src="/2021/04/13/day05-%E5%B0%81%E8%A3%85-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/2019-12-14_18-36-39.jpg" alt="2019-12-14_18-36-39" style="zoom:50%;">

<p>通过上图，我们可以理解，在栈内存中运行的方法，遵循<font style="color:red">“先进后出，后进先出”</font>的原则。变量p指向堆内存中的空间，寻找方法信息，去执行该方法。但是，这里依然有问题存在。创建多个对象时，如果每个对象内部都保存一份方法信息，这就非常浪费内存了，因为所有对象的方法信息都是一样的。那么如何解决这个问题呢？请看如下图解</p>
<img src="/2021/04/13/day05-%E5%B0%81%E8%A3%85-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/2019-12-14_18-37-21.jpg" alt="2019-12-14_18-37-21" style="zoom:50%;">

<img src="/2021/04/13/day05-%E5%B0%81%E8%A3%85-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/2019-12-14_18-38-09.jpg" alt="2019-12-14_18-38-09" style="zoom:50%;">

<h2 id="1-7、成员变量和局部变量的区别"><a href="#1-7、成员变量和局部变量的区别" class="headerlink" title="1.7、成员变量和局部变量的区别"></a>1.7、成员变量和局部变量的区别</h2><p>// 变量根据定义位置的不同，我们给变量起了不同的名字<br><strong style="color:red">1）在类中的位置不同（重点）</strong><br>    <strong>成员变量：类中，方法外</strong><br>    <strong>局部变量：方法中或者方法声明上（形式参数）</strong><br><strong style="color:red">2）作用范围不一样（重点）</strong><br>    <strong>成员变量：类中</strong><br>    <strong>局部变量：方法中</strong><br><strong style="color:red">3）初始化值的不同（重点）</strong><br>    <strong>成员变量：有默认值</strong><br>    <strong>局部变量：没有默认值。必须先定义，赋值，最后使用</strong><br><strong style="color:red">4）在内存中的位置不同（了解）</strong><br>    <strong>成员变量：堆内存</strong><br>    <strong>局部变量：栈内存</strong><br><strong style="color:red">5）生命周期不同（了解）</strong><br>    <strong>成员变量：随着对象的创建而存在，随着对象的消失而消失</strong><br>    <strong>局部变量：随着方法的调用而存在，随着方法的调用完毕而消失</strong></p>
<img src="/2021/04/13/day05-%E5%B0%81%E8%A3%85-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/2019-12-14_18-39-30.jpg" alt="2019-12-14_18-39-30" style="zoom:50%;">

<blockquote>
<p><strong>简单涉及垃圾回收机制：</strong></p>
<p>在方法中将对象赋值 null : p = null; 当所占内存超过一定阈值，将作了标记的对象回收(主动释放内存空间)</p>
</blockquote>
<h1 id="第二章、封装"><a href="#第二章、封装" class="headerlink" title="第二章、封装"></a>第二章、封装</h1><h2 id="2-1、封装的概述"><a href="#2-1、封装的概述" class="headerlink" title="2.1、封装的概述"></a>2.1、封装的概述</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">面向对象编程语言是对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界无法直接操作和修改。封装可以被认为是一个保护屏障，防止该类的代码和数据被其他类随意访问。要访问该类的数据，必须通过指定的方式。适当的封装可以让代码更容易理解与维护，也加强了代码的安全性</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 原则：将属性隐藏起来，若需要访问某个属性，提供公共方法对其访</span></span><br></pre></td></tr></table></figure>

<h2 id="2-2、封装的步骤"><a href="#2-2、封装的步骤" class="headerlink" title="2.2、封装的步骤"></a>2.2、封装的步骤</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）使用 <span class="keyword">private</span> 关键字来修饰成员变量</span><br><span class="line"><span class="number">2</span>）对需要访问的成员变量，提供对应的一对 getXxx 方法 、 setXxx 方法</span><br></pre></td></tr></table></figure>

<h2 id="2-3、封装操作—private关键字"><a href="#2-3、封装操作—private关键字" class="headerlink" title="2.3、封装操作—private关键字"></a>2.3、封装操作—private关键字</h2><h3 id="2-3-1、private的含义"><a href="#2-3-1、private的含义" class="headerlink" title="2.3.1、private的含义"></a>2.3.1、private的含义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）<span class="keyword">private</span>是一个权限修饰符，代表最小权限</span><br><span class="line"><span class="number">2</span>）可以修饰成员变量和成员方法</span><br><span class="line"><span class="number">3</span>）被<span class="keyword">private</span>修饰后的成员变量和成员方法，只在本类中才能访问</span><br></pre></td></tr></table></figure>

<h3 id="2-3-2、private的格式"><a href="#2-3-2、private的格式" class="headerlink" title="2.3.2、private的格式"></a>2.3.2、private的格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）<span class="keyword">private</span> 数据类型 变量名</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>）提供 getXxx 方法(取值) / setXxx(赋值) 方法，可以访问成员变量</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">    		name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    		age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   		 <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-4、封装优化1—this关键字"><a href="#2-4、封装优化1—this关键字" class="headerlink" title="2.4、封装优化1—this关键字"></a>2.4、封装优化1—this关键字</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">我们发现 setXxx 方法中的形参名字并不符合见名知意的规定，那么如果修改与成员变量名一致，是否就见名知意</span><br><span class="line">了呢？代码如下：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    		name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    		age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 经过修改和测试，我们发现新的问题，成员变量赋值失败了。也就是说，在修改了 setXxx() 的形参变量名后，方法并没有给成员变量赋值！这是由于形参变量名与成员变量名重名，导致成员变量名被隐藏，方法中的变量名，无法访问到成员变量，从而赋值失败。所以，我们只能使用this关键字，来解决这个重名问题</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-1、this的含义"><a href="#2-4-1、this的含义" class="headerlink" title="2.4.1、this的含义"></a>2.4.1、this的含义</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// this代表所在类的当前对象的引用（地址值），即对象自己的引用</span></span><br><span class="line">⚠️记住：方法被哪个对象调用，方法中的<span class="keyword">this</span>就代表那个对象。即谁在调用，<span class="keyword">this</span>就代表谁</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2、this的格式"><a href="#2-4-2、this的格式" class="headerlink" title="2.4.2、this的格式"></a>2.4.2、this的格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.成员变量名;</span><br><span class="line"><span class="comment">// 示例：使用 this 修饰方法中的变量，解决成员变量被隐藏的问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//name = name;</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//age = age;</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">⚠️方法中只有一个变量名时，默认也是使用 <span class="keyword">this</span> 修饰，可以省略不写</span><br></pre></td></tr></table></figure>

<h2 id="2-5、封装优化2—构造方法"><a href="#2-5、封装优化2—构造方法" class="headerlink" title="2.5、封装优化2—构造方法"></a>2.5、封装优化2—构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）当一个对象被创建时候，构造方法用来初始化该对象，给对象的成员变量赋初始值。</span><br><span class="line"><span class="number">2</span>）无论你与否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个无参数构造方法，一旦自己定义了构造方法，	Java自动提供的默认无参数构造方法就会失效</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 格式：构造方法的写法上，方法名与它所在的类名相同。它没有返回值，所以不需要返回值类型，甚至不需要void</span></span><br><span class="line">  修饰符 构造方法名(参数列表)&#123;</span><br><span class="line">			<span class="comment">// 方法体</span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong style="color:red">⚠️注意事项：</strong><br>        <strong>1. 如果你不提供构造方法，系统会给出无参数构造方法。</strong><br>        <strong>2. 如果你提供了构造方法，系统将不再提供无参数构造方法。</strong><br>        <strong>3. 构造方法是可以重载的，既可以定义参数，也可以不定义参数。</strong></p>
<h2 id="2-6、标准代码"><a href="#2-6、标准代码" class="headerlink" title="2.6、标准代码"></a>2.6、标准代码</h2><p><strong>JavaBean 是 Java语言编写类的一种标准规范</strong><br><strong>符合 JavaBean 的类要：</strong><br>    <strong>1.类必须是具体的和公共的</strong><br>    <strong>2.有构造方法</strong><br>    <strong>3.提供用来操作成员变量的 set 和 get 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例一</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="comment">//无参构造方法</span></span><br><span class="line">    <span class="comment">//有参构造方法</span></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="comment">//getXxx()</span></span><br><span class="line">    <span class="comment">//setXxx()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 示例二</span></span><br><span class="line">	<span class="comment">// 创建学生类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function">publicvoid <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   		 <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">publicvoid <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">publicint <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="comment">// 创建测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//无参构造使用</span></span><br><span class="line">        Student s= <span class="keyword">new</span> Student();</span><br><span class="line">        s.setName(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">18</span>);</span><br><span class="line">        System.out.println(s.getName()+<span class="string">&quot;‐‐‐&quot;</span>+s.getAge());</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//带参构造使用</span></span><br><span class="line">        Student s2= <span class="keyword">new</span> Student(<span class="string">&quot;赵丽颖&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(s2.getName()+<span class="string">&quot;‐‐‐&quot;</span>+s2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="今日作业："><a href="#今日作业：" class="headerlink" title="今日作业："></a>今日作业：</h3><h4 id="四位整数求各位数和："><a href="#四位整数求各位数和：" class="headerlink" title="四位整数求各位数和："></a>四位整数求各位数和：</h4><img src="/2021/04/13/day05-%E5%B0%81%E8%A3%85-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/和.png" width="65%">

<h4 id="各个数出现的次数："><a href="#各个数出现的次数：" class="headerlink" title="各个数出现的次数："></a>各个数出现的次数：</h4><img src="/2021/04/13/day05-%E5%B0%81%E8%A3%85-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/出现次数.png" width="65%">

<img src="/2021/04/13/day05-%E5%B0%81%E8%A3%85-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/出现次数结果.png" width="65%">]]></content>
      <categories>
        <category>Java</category>
        <category>培训学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Phone Store 移动端手机商城</title>
    <url>/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/</url>
    <content><![CDATA[<p><strong><em>一个基于 SpringBoot+Vue 开发的移动端手机商城</em></strong></p>
<span id="more"></span>

<h2 id="Phone-Store"><a href="#Phone-Store" class="headerlink" title="Phone Store"></a>Phone Store</h2><p>基于移动端的手机商城</p>
<p>基于 Spring Boot + Vue 的前后端分离开发架构</p>
<h4 id="前端技术栈"><a href="#前端技术栈" class="headerlink" title="前端技术栈"></a>前端技术栈</h4><p>Vue + Vant UI + less</p>
<h4 id="后端技术栈"><a href="#后端技术栈" class="headerlink" title="后端技术栈"></a>后端技术栈</h4><p>Spring Boot + Spring Data JPA</p>
<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>MySQL</p>
<h3 id="1-创建-Vue-项目"><a href="#1-创建-Vue-项目" class="headerlink" title="1. 创建 Vue 项目"></a>1. 创建 Vue 项目</h3><p>首先创建一个基础的vue项目，创建过程不做过多赘述。创建好了之后直接打开，进行插件安装。</p>
<h4 id="1-1插件安装"><a href="#1-1插件安装" class="headerlink" title="1.1插件安装"></a>1.1插件安装</h4><blockquote>
<p>Vant UI 安装命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm i vant -S</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/VantUI%E5%AE%89%E8%A3%85.png" alt="VantUI安装"></p>
<blockquote>
<p>less 安装命令</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install less less-loader --save</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/less%E5%AE%89%E8%A3%85.png" alt="less安装"></p>
<h4 id="1-2-导入并启用插件"><a href="#1-2-导入并启用插件" class="headerlink" title="1.2 导入并启用插件"></a>1.2 导入并启用插件</h4><p>进入 src 目录下的 main.js 文件中。</p>
<blockquote>
<p>导入 vant 插件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vant <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>导入 css 插件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vant/lib/index.css&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>启用 Vant UI 插件</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.use(Vant);</span><br></pre></td></tr></table></figure>

<h3 id="2-界面实现"><a href="#2-界面实现" class="headerlink" title="2. 界面实现"></a>2. 界面实现</h3><h4 id="2-1-首页界面实现"><a href="#2-1-首页界面实现" class="headerlink" title="2.1 首页界面实现"></a>2.1 首页界面实现</h4><blockquote>
<p>导航代码:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;van-tab v-for&#x3D;&quot;index in categories.length&quot; :title&#x3D;&quot;categories[index-1].name&quot; class&#x3D;&quot;tab&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>利用 <code> v-for</code> 从<code> categories</code> 中遍历元素。</p>
<p><strong>categories:</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        categories: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;魅焰红&#x27;</span>,</span><br><span class="line">                type: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;极光蓝&#x27;</span>,</span><br><span class="line">                type: <span class="number">2</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;铂光金&#x27;</span>,</span><br><span class="line">                type: <span class="number">3</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&#x27;幻夜黑&#x27;</span>,</span><br><span class="line">                type: <span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>遍历商品</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;van-tab v-for&#x3D;&quot;index in categories.length&quot; :title&#x3D;&quot;categories[index-1].name&quot; class&#x3D;&quot;tab&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;van-card v-for&#x3D;&quot;(item,index) in phones&quot;</span><br><span class="line">              :price&#x3D;&quot;item.price&quot;</span><br><span class="line">              :desc&#x3D;&quot;item.desc&quot;</span><br><span class="line">              :title&#x3D;&quot;item.title&quot;</span><br><span class="line">              :thumb&#x3D;&quot;item.thumb&quot;</span><br><span class="line">              &gt;</span><br><span class="line">        &lt;template #tags&gt;</span><br><span class="line">&lt;van-tag v-for&#x3D;&quot;tag in item.tag&quot; color&#x3D;&quot;#f2826a&quot; style&#x3D;&quot;margin-left: 5px;&quot;&gt;&#123;&#123;tag.name&#125;&#125;&lt;&#x2F;van-tag&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;template #footer&gt;</span><br><span class="line">&lt;van-button round type&#x3D;&quot;info&quot; size&#x3D;&quot;mini&quot; @click&#x3D;&quot;buy(index)&quot;&gt;购买&lt;&#x2F;van-button&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line">    &lt;&#x2F;van-card&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;van-tab&gt;</span><br></pre></td></tr></table></figure>

<p><strong>phones:</strong></p>
<p>​    静态测试数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">phones: [</span><br><span class="line">    &#123;</span><br><span class="line">        id:<span class="number">1</span>,</span><br><span class="line">        title: <span class="string">&quot;Honor 8A&quot;</span>,</span><br><span class="line">        price: <span class="string">&quot;2800.00&quot;</span>,</span><br><span class="line">        desc: <span class="string">&quot;魅焰红&quot;</span>,</span><br><span class="line">        tag: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;720P珍珠屏&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;Micro USB接口&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        thumb: <span class="string">&quot;../static/e84a2e03-7f19-41d2-98a5-a5c16b7e252d.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id:<span class="number">2</span>,</span><br><span class="line">        title: <span class="string">&quot;Honor 10 青春版&quot;</span>,</span><br><span class="line">        price: <span class="string">&quot;2800.00&quot;</span>,</span><br><span class="line">        desc: <span class="string">&quot;极光蓝&quot;</span>,</span><br><span class="line">        tag: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;720P珍珠屏&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;EMUI9 Lite&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        thumb: <span class="string">&quot;../static/8f0bd0d0-a11e-4185-927e-04b54ff4a1bd.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id:<span class="number">3</span>,</span><br><span class="line">        title: <span class="string">&quot;Honor V20&quot;</span>,</span><br><span class="line">        price: <span class="string">&quot;3450.00&quot;</span>,</span><br><span class="line">        desc: <span class="string">&quot;铂光金&quot;</span>,</span><br><span class="line">        tag: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;2+1独立三卡槽&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        thumb: <span class="string">&quot;../static/fd7fee3c-a35c-477b-b007-9fda6e9c589a.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id:<span class="number">4</span>,</span><br><span class="line">        title: <span class="string">&quot;HUAWEI Mate 20 Pro&quot;</span>,</span><br><span class="line">        price: <span class="string">&quot;4550.00&quot;</span>,</span><br><span class="line">        desc: <span class="string">&quot;幻夜黑&quot;</span>,</span><br><span class="line">        tag: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;内存3GB&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;EMUI9 Lite&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        thumb: <span class="string">&quot;../static/cb819ad9-ec6f-4123-a4e9-aa629e2f8224.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id:<span class="number">5</span>,</span><br><span class="line">        title: <span class="string">&quot;HUAWEI nova 5 Pro&quot;</span>,</span><br><span class="line">        price: <span class="string">&quot;5450.00&quot;</span>,</span><br><span class="line">        desc: <span class="string">&quot;5450.00&quot;</span>,</span><br><span class="line">        tag: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;内存3GB&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;Micro USB接口&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        thumb: <span class="string">&quot;../static/8a0f5be0-3c78-4f23-b58b-dc2a92f1f95a.jpg&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id:<span class="number">1</span>,</span><br><span class="line">        title: <span class="string">&quot;HUAWEI P30&quot;</span>,</span><br><span class="line">        price: <span class="string">&quot;8700.00&quot;</span>,</span><br><span class="line">        desc: <span class="string">&quot;极光蓝&quot;</span>,</span><br><span class="line">        tag: [</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;720P珍珠屏&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: <span class="string">&quot;内存3GB&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        thumb: <span class="string">&quot;../static/6dcad185-315f-40f0-87f2-52910f49c8b7.jpg&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>静态数据测试预览图：</strong></p>
<img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/演示1.png" width="50%">

<h5 id="2-1-1-导航切换（点击事件绑定）"><a href="#2-1-1-导航切换（点击事件绑定）" class="headerlink" title="2.1.1 导航切换（点击事件绑定）"></a>2.1.1 导航切换（点击事件绑定）</h5><p>当点击导航栏时，触发点击事件。后面将通过点击事件来进行页面的切换操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">   <span class="function"><span class="title">onClick</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">     ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-1-2-Sku-商品规格"><a href="#2-1-2-Sku-商品规格" class="headerlink" title="2.1.2 Sku 商品规格"></a>2.1.2 Sku 商品规格</h5><h6 id="Sku-对象结构"><a href="#Sku-对象结构" class="headerlink" title="Sku 对象结构"></a>Sku 对象结构</h6><p>使用 Vant UI 提供的 Sku 商品规格组价模块来制作商品规格界面。</p>
<p>详细文档连接：<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/sku#dai-ma-yan-shi">https://vant-contrib.gitee.io/vant/#/zh-CN/sku#dai-ma-yan-shi</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sku: &#123;</span><br><span class="line">  <span class="comment">// 所有sku规格类目与其值的从属关系，比如商品有颜色和尺码两大类规格，颜色下面又有红色和蓝色两个规格值。</span></span><br><span class="line">  <span class="comment">// 可以理解为一个商品可以有多个规格类目，一个规格类目下可以有多个规格值。</span></span><br><span class="line">  tree: [</span><br><span class="line">    &#123;</span><br><span class="line">      k: <span class="string">&#x27;颜色&#x27;</span>, <span class="comment">// skuKeyName：规格类目名称</span></span><br><span class="line">      k_s: <span class="string">&#x27;s1&#x27;</span>, <span class="comment">// skuKeyStr：sku 组合列表（下方 list）中当前类目对应的 key 值，value 值会是从属于当前类目的一个规格值 id</span></span><br><span class="line">      v: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">&#x27;1&#x27;</span>, <span class="comment">// skuValueId：规格值 id</span></span><br><span class="line">          name: <span class="string">&#x27;红色&#x27;</span>, <span class="comment">// skuValueName：规格值名称</span></span><br><span class="line">          imgUrl: <span class="string">&#x27;https://img01.yzcdn.cn/1.jpg&#x27;</span>, <span class="comment">// 规格类目图片，只有第一个规格类目可以定义图片</span></span><br><span class="line">          previewImgUrl: <span class="string">&#x27;https://img01.yzcdn.cn/1p.jpg&#x27;</span>, <span class="comment">// 用于预览显示的规格类目图片</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;蓝色&#x27;</span>,</span><br><span class="line">          imgUrl: <span class="string">&#x27;https://img01.yzcdn.cn/2.jpg&#x27;</span>,</span><br><span class="line">          previewImgUrl: <span class="string">&#x27;https://img01.yzcdn.cn/2p.jpg&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      largeImageMode: <span class="literal">true</span>, <span class="comment">//  是否展示大图模式</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 所有 sku 的组合列表，比如红色、M 码为一个 sku 组合，红色、S 码为另一个组合</span></span><br><span class="line">  list: [</span><br><span class="line">    &#123;</span><br><span class="line">      id: <span class="number">2259</span>, <span class="comment">// skuId</span></span><br><span class="line">      s1: <span class="string">&#x27;1&#x27;</span>, <span class="comment">// 规格类目 k_s 为 s1 的对应规格值 id</span></span><br><span class="line">      s2: <span class="string">&#x27;1&#x27;</span>, <span class="comment">// 规格类目 k_s 为 s2 的对应规格值 id</span></span><br><span class="line">      price: <span class="number">100</span>, <span class="comment">// 价格（单位分）</span></span><br><span class="line">      stock_num: <span class="number">110</span> <span class="comment">// 当前 sku 组合对应的库存</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  price: <span class="string">&#x27;1.00&#x27;</span>, <span class="comment">// 默认价格（单位元）</span></span><br><span class="line">  stock_num: <span class="number">227</span>, <span class="comment">// 商品总库存</span></span><br><span class="line">  collection_id: <span class="number">2261</span>, <span class="comment">// 无规格商品 skuId 取 collection_id，否则取所选 sku 组合对应的 id</span></span><br><span class="line">  none_sku: <span class="literal">false</span>, <span class="comment">// 是否无规格商品</span></span><br><span class="line">  messages: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 商品留言</span></span><br><span class="line">      datetime: <span class="string">&#x27;0&#x27;</span>, <span class="comment">// 留言类型为 time 时，是否含日期。&#x27;1&#x27; 表示包含</span></span><br><span class="line">      multiple: <span class="string">&#x27;0&#x27;</span>, <span class="comment">// 留言类型为 text 时，是否多行文本。&#x27;1&#x27; 表示多行</span></span><br><span class="line">      name: <span class="string">&#x27;留言&#x27;</span>, <span class="comment">// 留言名称</span></span><br><span class="line">      type: <span class="string">&#x27;text&#x27;</span>, <span class="comment">// 留言类型，可选: id_no（身份证）, text, tel, date, time, email</span></span><br><span class="line">      required: <span class="string">&#x27;1&#x27;</span>, <span class="comment">// 是否必填 &#x27;1&#x27; 表示必填</span></span><br><span class="line">      placeholder: <span class="string">&#x27;&#x27;</span> <span class="comment">// 可选值，占位文本</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  hide_stock: <span class="literal">false</span> <span class="comment">// 是否隐藏剩余库存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态界面图如下：</p>
<img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/演示2.png" width="50%">

<h5 id="2-1-3-购买提交"><a href="#2-1-3-购买提交" class="headerlink" title="2.1.3 购买提交"></a>2.1.3 购买提交</h5><p>选后规格后，我们会进行提交操作，当点击“购买”按钮时需要获取数据。</p>
<p>所以我们可 以先想一想，需要提交的数据其实只要有 <strong style="color:green">商品的规格id和商品的数量</strong> 就可以了。</p>
<p>于是有点击事件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">onBuyClicked</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="comment">//  console.log(item)</span></span><br><span class="line">    <span class="built_in">this</span>.$store.state.specsId = item.selectedSkuComb.s1</span><br><span class="line">    <span class="built_in">this</span>.$store.state.quantity = item.selectedNum</span><br><span class="line">    <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/addressList&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们把item的值打印出来时可以在控制台看到如下图：</p>
<img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/演示3.png" width="50%">

<p>从图中可以看出，虽然我们从前端代码获取提交的只有商品规格id和商品数量，但是后台会从数据库中对数据进行整理，返回给前端的数据依旧是完整的。</p>
<h4 id="2-2-AddressList界面实现"><a href="#2-2-AddressList界面实现" class="headerlink" title="2.2 AddressList界面实现"></a>2.2 AddressList界面实现</h4><p>AddressList 界面的实现使用 Vant UI 的业务组件中的 <font style="color:green">AddressList 地址列表组件</font>，以下是它的基本用法。</p>
<p>当然，你也可以访问官网：<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/address-list#dai-ma-yan-shi">https://vant-contrib.gitee.io/vant/#/zh-CN/address-list#dai-ma-yan-shi</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;van-address-list</span><br><span class="line">  v-model&#x3D;&quot;chosenAddressId&quot;</span><br><span class="line">  :list&#x3D;&quot;list&quot;</span><br><span class="line">  :disabled-list&#x3D;&quot;disabledList&quot;</span><br><span class="line">  disabled-text&#x3D;&quot;以下地址超出配送范围&quot;</span><br><span class="line">  default-tag-text&#x3D;&quot;默认&quot;</span><br><span class="line">  @add&#x3D;&quot;onAdd&quot;</span><br><span class="line">  @edit&#x3D;&quot;onEdit&quot;</span><br><span class="line">&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      chosenAddressId: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">          tel: <span class="string">&#x27;13000000000&#x27;</span>,</span><br><span class="line">          address: <span class="string">&#x27;浙江省杭州市西湖区文三路 138 号东方通信大厦 7 楼 501 室&#x27;</span>,</span><br><span class="line">          isDefault: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">          tel: <span class="string">&#x27;1310000000&#x27;</span>,</span><br><span class="line">          address: <span class="string">&#x27;浙江省杭州市拱墅区莫干山路 50 号&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      disabledList: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">          tel: <span class="string">&#x27;1320000000&#x27;</span>,</span><br><span class="line">          address: <span class="string">&#x27;浙江省杭州市滨江区江南大道 15 号&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">onAdd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      Toast(<span class="string">&#x27;新增地址&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onEdit</span>(<span class="params">item, index</span>)</span> &#123;</span><br><span class="line">      Toast(<span class="string">&#x27;编辑地址:&#x27;</span> + index);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>预览图：</p>
<img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/演示4.png" width="50%">

<h4 id="2-3-AddressNew界面实现"><a href="#2-3-AddressNew界面实现" class="headerlink" title="2.3 AddressNew界面实现"></a>2.3 AddressNew界面实现</h4><p>这个界面主要用来新增地址，当点击新增地址后会跳转到该界面。</p>
<p>在实现该界面之前，必须导入一个名为 <strong style="color:red"> area.js </strong> 的文件，该文件主要用来存储各个省市的地址信息，用来提供选项调用。</p>
<img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/address.png" width="50%">

<p>AddressNew 界面可以使用 Vant UI 中的AddressEdit 组件进行实现。<br>文档链接：<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/address-edit">https://vant-contrib.gitee.io/vant/#/zh-CN/address-edit</a></p>
<p><strong>基础用法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;van-address-edit</span><br><span class="line">  :area-list&#x3D;&quot;areaList&quot;</span><br><span class="line">  show-postal</span><br><span class="line">  show-delete</span><br><span class="line">  show-set-default</span><br><span class="line">  show-search-result</span><br><span class="line">  :search-result&#x3D;&quot;searchResult&quot;</span><br><span class="line">  :area-columns-placeholder&#x3D;&quot;[&#39;请选择&#39;, &#39;请选择&#39;, &#39;请选择&#39;]&quot;</span><br><span class="line">  @save&#x3D;&quot;onSave&quot;</span><br><span class="line">  @delete&#x3D;&quot;onDelete&quot;</span><br><span class="line">  @change-detail&#x3D;&quot;onChangeDetail&quot;</span><br><span class="line">&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      areaList,</span><br><span class="line">      searchResult: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">onSave</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      Toast(<span class="string">&#x27;save&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onDelete</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      Toast(<span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onChangeDetail</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.searchResult = [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">&#x27;黄龙万科中心&#x27;</span>,</span><br><span class="line">            address: <span class="string">&#x27;杭州市西湖区&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.searchResult = [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>预览图：</p>
<img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/演示5.png" width="50%">

<h4 id="2-4-AddressEdit界面实现"><a href="#2-4-AddressEdit界面实现" class="headerlink" title="2.4 AddressEdit界面实现"></a>2.4 AddressEdit界面实现</h4><p>AddressEdit 界面的实现和前面的 AddressNew 的界面相差无几，只需用同样的组件稍作修改就可以了。</p>
<p><strong>需要注意的是，</strong>在之前的 AddressList 页面中，需要对修改按钮绑定一个名为<code> onEdit()</code>的点击事件，方法为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">onEdit</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.stringify(item)</span><br><span class="line">    <span class="built_in">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">&#x27;/addressEdit&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">item</span>:data&#125;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法的作用就是将地址列表里的地址对象传递给 AddressEdit 界面，从而实现对地址的编辑。</p>
<p>于是，对应的，在 AddressEdit 中的<code> created()</code>中需要取出数据：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//取出item对象</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="built_in">JSON</span>.parse(<span class="built_in">this</span>.$route.query.item)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-Detail-界面实现"><a href="#2-5-Detail-界面实现" class="headerlink" title="2.5 Detail 界面实现"></a>2.5 Detail 界面实现</h4><p>该界面是订单详情界面，布局比较简单，我们采用 Vant UI 中的 Cell 单元格 的布局。</p>
<p>文档链接：<a href="https://vant-contrib.gitee.io/vant/#/zh-CN/cell">https://vant-contrib.gitee.io/vant/#/zh-CN/cell</a></p>
<p>适当使用 <code> span</code>来调整单元格大小使布局看起来更合理。</p>
<p><strong>另外，值得注意的是，在 Vant UI 中，对于金额的计数单位是 ‘分’ 而不是 ‘元’，所以在处理付款金额时，需要再乘以100：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;van-submit-bar</span><br><span class="line">    :price=<span class="string">&quot;data.amount*100&quot;</span></span><br><span class="line">    button-text=<span class="string">&quot;确认付款&quot;</span></span><br><span class="line">    @submit=<span class="string">&quot;onSubmit&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<p>界面预览：</p>
<img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/演示6.png" width="50%">

<h5 id="2-5-1-Success-界面实现"><a href="#2-5-1-Success-界面实现" class="headerlink" title="2.5.1 Success 界面实现"></a>2.5.1 Success 界面实现</h5><p>该界面最为简单，所以不做过多说明，所需数据仅仅只有付款金额。</p>
<p>界面预览：</p>
<img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/演示7.png" width="50%">

<h5 id="2-5-2-Info-界面实现"><a href="#2-5-2-Info-界面实现" class="headerlink" title="2.5.2 Info 界面实现"></a>2.5.2 Info 界面实现</h5><p>Info 界面即订单详情界面，该界面与 Detail 界面十分雷同，所以可以直接在 Detail 界面拷贝的基础上进行修改。</p>
<p>界面预览：</p>
<img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/演示8.png" width="50%">

<h3 id="3-接口文档规范"><a href="#3-接口文档规范" class="headerlink" title="3. 接口文档规范"></a>3. 接口文档规范</h3><h4 id="3-1-首页数据"><a href="#3-1-首页数据" class="headerlink" title="3.1 首页数据"></a>3.1 首页数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET  /phone/index</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: 0,</span><br><span class="line">        msg: &quot;成功&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                categories:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        name: &quot;魅焰红&quot;,</span><br><span class="line">                        type: 1</span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                    phones:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            id: 1,</span><br><span class="line">                            title: &quot;Honor 8A&quot;,</span><br><span class="line">                            price: &quot;2800.00&quot;,</span><br><span class="line">                            desc: &quot;魅焰红&quot;,</span><br><span class="line">                            tag: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    name: &quot;720p珍珠屏&quot;</span><br><span class="line">                                &#125;,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    name: &quot;Micro USB接口&quot;</span><br><span class="line">                                &#125;</span><br><span class="line">                            ],</span><br><span class="line">                            thumb: &quot;../static/e84a2e03-7f19-41d2-98a5-a5c16b7e252d.jpg&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-根据类型查询手机"><a href="#3-2-根据类型查询手机" class="headerlink" title="3.2 根据类型查询手机"></a>3.2 根据类型查询手机</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET  /phone/findByCategoryType</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">categoryType: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: 0,</span><br><span class="line">    msg: &quot;成功&quot;,</span><br><span class="line">    data: [</span><br><span class="line">        &#123;</span><br><span class="line">            id: 1,</span><br><span class="line">            title: &quot;Honor 8A&quot;,</span><br><span class="line">            price: &quot;2800.00.00&quot;,</span><br><span class="line">            desc: &quot;魅焰红&quot;,</span><br><span class="line">            tag: [</span><br><span class="line">                &#123;</span><br><span class="line">                    name: &quot;720p珍珠屏&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name: &quot;Micro USB接口&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            thumb: &quot;../static/e84a2e03-7f19-41d2-98a5-a5c16b7e252d.jpg&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-查询手机规格"><a href="#3-3-查询手机规格" class="headerlink" title="3.3 查询手机规格"></a>3.3 查询手机规格</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET  /phone/findSpecsByPhoneId</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">phoneID: <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: 0,</span><br><span class="line">    msg: &quot;成功&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        goods: &#123;</span><br><span class="line">            picture: &quot;../static/e84a2e03-7f19-41d2-98a5-a5c16b7e252d.jpg&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        sku: &#123;</span><br><span class="line">            tree: [</span><br><span class="line">                &#123;</span><br><span class="line">                    k: &quot;规格&quot;,</span><br><span class="line">                    v: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            id: 1,</span><br><span class="line">                            name: &quot;32GB&quot;,</span><br><span class="line">                            imgUrl: &quot;../static/e84a2e03-7f19-41d2-98a5-a5c16b7e252d.jpg&quot;,</span><br><span class="line">                            previewImgUrl: &quot;../static/e84a2e03-7f19-41d2-98a5-a5c16b7e252d.jpg&quot;</span><br><span class="line">                        &#125; ,</span><br><span class="line">                        &#123;</span><br><span class="line">                            id: 2,</span><br><span class="line">                            name: &quot;64GB&quot;,</span><br><span class="line">                            imgUrl: &quot;../static/e84a2e03-7f19-41d2-98a5-a5c16b7e252d.jpg&quot;,</span><br><span class="line">                            previewImgUrl: &quot;../static/e84a2e03-7f19-41d2-98a5-a5c16b7e252d.jpg&quot;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    k_s: &quot;s1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            list: [</span><br><span class="line">                &#123;</span><br><span class="line">                    s1: 1,</span><br><span class="line">                    price: 280000,</span><br><span class="line">                    stock_num: 1</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    s1: 2,</span><br><span class="line">                    price: 320000,</span><br><span class="line">                    stock_num: 1</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            price: &quot;2800.00&quot;,</span><br><span class="line">            stock_num: 2,</span><br><span class="line">            none_sku: false,</span><br><span class="line">            hide_stock: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-查询地址"><a href="#3-4-查询地址" class="headerlink" title="3.4 查询地址"></a>3.4 查询地址</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET  /address/list</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: 0,</span><br><span class="line">    msg: &quot;成功&quot;,</span><br><span class="line">    data: [</span><br><span class="line">        &#123;</span><br><span class="line">            areaCode: &quot;440303&quot;,</span><br><span class="line">            id: 21,</span><br><span class="line">            name: &quot;张三&quot;,</span><br><span class="line">            tel: &quot;13678787878&quot;,</span><br><span class="line">            address: &quot;广东省深圳市罗湖区科技路123号456室&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-5-新增地址"><a href="#3-5-新增地址" class="headerlink" title="3.5 新增地址"></a>3.5 新增地址</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">POST  /address/create</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &quot;张三&quot;,</span><br><span class="line">    tel: &quot;13678900987&quot;,</span><br><span class="line">    country: &quot;&quot;,</span><br><span class="line">    province: &quot;北京市&quot;,</span><br><span class="line">    city: &quot;北京市&quot;,</span><br><span class="line">    county: &quot;东城区&quot;,</span><br><span class="line">    areaCode: &quot;110101&quot;,</span><br><span class="line">    postalCode: &quot;&quot;,</span><br><span class="line">    addressDetail: &quot;168号306室&quot;,</span><br><span class="line">    isDefault: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: 0,</span><br><span class="line">    msg: &quot;成功&quot;,</span><br><span class="line">    data: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-6-修改地址"><a href="#3-6-修改地址" class="headerlink" title="3.6 修改地址"></a>3.6 修改地址</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PUT  /address/update</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    id: 27,</span><br><span class="line">    name: &quot;张三&quot;,</span><br><span class="line">    tel: &quot;13678900987&quot;,</span><br><span class="line">    addressDetail: &quot;168号306室&quot;,</span><br><span class="line">    areaCode: &quot;110101&quot;,</span><br><span class="line">    province: &quot;北京市&quot;,</span><br><span class="line">    city: &quot;北京市&quot;,</span><br><span class="line">    county: &quot;东城区&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: 0,</span><br><span class="line">    msg: &quot;成功&quot;,</span><br><span class="line">    data: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-7-创建订单"><a href="#3-7-创建订单" class="headerlink" title="3.7 创建订单"></a>3.7 创建订单</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">POST  /order/create</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: &quot;张三&quot;,</span><br><span class="line">    tel: &quot;13678787878&quot;,</span><br><span class="line">    address: &quot;广东省深圳市罗湖区科技路123号456室&quot;,</span><br><span class="line">    specsId: 1,</span><br><span class="line">    quantity: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: 0,</span><br><span class="line">    msg: &quot;成功&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        orderId: &quot;1586254006069813075&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-8-订单详情"><a href="#3-8-订单详情" class="headerlink" title="3.8 订单详情"></a>3.8 订单详情</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    code: 0,</span><br><span class="line">    msg: &quot;成功&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        orderId: &quot;1586253884545138376&quot;,</span><br><span class="line">        buyerName: &quot;张三&quot;,</span><br><span class="line">        phoneName: &quot;Honor 8A&quot;,</span><br><span class="line">        payStatus: 0,</span><br><span class="line">        freight: 10,</span><br><span class="line">        tel: &quot;13678787878&quot;,</span><br><span class="line">        address: &quot;广东省深圳市罗湖区科技路123号456室&quot;,</span><br><span class="line">        num: 1,</span><br><span class="line">        specs: &quot;32GB&quot;,</span><br><span class="line">        price: &quot;2800.00.00&quot;,</span><br><span class="line">        icon: &quot;../static/e84a2e03-7f19-41d2-98a5-a5c16b7e252d.jpg&quot;,</span><br><span class="line">        amount: 2800</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-9-支付订单"><a href="#3-9-支付订单" class="headerlink" title="3.9 支付订单"></a>3.9 支付订单</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PUT  /order/pay</span><br></pre></td></tr></table></figure>

<p>参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">orderId: &quot;1586253884545138376&quot;</span><br></pre></td></tr></table></figure>

<p>返回：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   	code: 0,</span><br><span class="line">    msg: &quot;成功&quot;,</span><br><span class="line">    data: &quot;1586253884545138376&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-数据表持久化"><a href="#4-数据表持久化" class="headerlink" title="4.数据表持久化"></a>4.数据表持久化</h3><p>在进行此操作时，由于我们有使用 Spring Data JPA ，所以我们只需要构建实体类和工厂接口，但是无需对接口进行实现，JPA 会自动帮我们完成常用方法的实现。</p>
<h4 id="4-1-PhoneCategory-持久化"><a href="#4-1-PhoneCategory-持久化" class="headerlink" title="4.1 PhoneCategory 持久化"></a>4.1 PhoneCategory 持久化</h4><p>数据库表 phone_category 有如下数据：</p>
<p><img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/phoneCategory.png" alt="phoneCategory"></p>
<blockquote>
<p>构建实体类 PhoneCategory :</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneCategory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span>   <span class="comment">//设置主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span> <span class="comment">//设置自增方式</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryId;</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="keyword">private</span> Integer categoryType;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建 Repository 接口：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PhoneCategoryRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">PhoneCategory</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PhoneCategory <span class="title">findByCategoryType</span><span class="params">(Integer categoryType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneCategoryRepositoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PhoneCategoryRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;PhoneCategory&gt; list=repository.findAll();</span><br><span class="line">        <span class="keyword">for</span> (PhoneCategory phoneCategory : list) &#123;</span><br><span class="line">            System.out.println(phoneCategory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findByCategoryType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        PhoneCategory phoneCategory = repository.findByCategoryType(<span class="number">1</span>);</span><br><span class="line">        System.out.println(phoneCategory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-PhoneInfo-持久化"><a href="#4-2-PhoneInfo-持久化" class="headerlink" title="4.2 PhoneInfo 持久化"></a>4.2 PhoneInfo 持久化</h4><p>数据库表有如下数据：</p>
<p><img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/phoneInfo.png" alt="phoneInfo"></p>
<blockquote>
<p>构建实体类 PhoneInfo ：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer phoneId;</span><br><span class="line">    <span class="keyword">private</span> String phoneName;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal phonePrice;</span><br><span class="line">    <span class="keyword">private</span> String phoneDescription;</span><br><span class="line">    <span class="keyword">private</span> Integer phoneStock;</span><br><span class="line">    <span class="keyword">private</span> String phoneIcon;</span><br><span class="line">    <span class="keyword">private</span> Integer categoryType;</span><br><span class="line">    <span class="keyword">private</span> String phoneTag;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建 PhoneInfoRepository ：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PhoneInfoRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">PhoneInfo</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;PhoneInfo&gt; <span class="title">findAllByCategoryType</span><span class="params">(Integer categoryType)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试 ：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneInfoRepositoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PhoneInfoRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;PhoneInfo&gt; list= repository.findAll();</span><br><span class="line">        <span class="keyword">for</span> (PhoneInfo phoneInfo : list) &#123;</span><br><span class="line">            System.out.println(phoneInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findAllByCategoryType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;PhoneInfo&gt; list = repository.findAllByCategoryType(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (PhoneInfo phoneInfo : list) &#123;</span><br><span class="line">            System.out.println(phoneInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-PhoneSpecs-持久化"><a href="#4-3-PhoneSpecs-持久化" class="headerlink" title="4.3 PhoneSpecs 持久化"></a>4.3 PhoneSpecs 持久化</h4><p>数据库有如下数据：</p>
<p><img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/phoneSpecs.png" alt="phoneSpecs"></p>
<blockquote>
<p>构建实体类 PhoneSpecs:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneSpecs</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer specsId;</span><br><span class="line">    <span class="keyword">private</span> Integer phoneId;</span><br><span class="line">    <span class="keyword">private</span> String specsName;</span><br><span class="line">    <span class="keyword">private</span> Integer specsStock;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal specsPrice;</span><br><span class="line">    <span class="keyword">private</span> String specsIcon;</span><br><span class="line">    <span class="keyword">private</span> String specsPreview;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建 PhoneSpecsRepository ：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PhoneSpecsRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">PhoneSpecs</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;PhoneSpecs&gt; <span class="title">findAllByPhoneId</span><span class="params">(Integer phoneId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneSpecsRepositoryTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PhoneSpecsRepository repository;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;PhoneSpecs&gt; list = repository.findAll();</span><br><span class="line">        <span class="keyword">for</span> (PhoneSpecs phoneSpecs : list) &#123;</span><br><span class="line">            System.out.println(phoneSpecs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-4-BuyerAddress-持久化"><a href="#4-4-BuyerAddress-持久化" class="headerlink" title="4.4 BuyerAddress 持久化"></a>4.4 BuyerAddress 持久化</h4><p>数据库有如下数据：</p>
<p><img src="/2021/04/06/Phone-Store-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%89%8B%E6%9C%BA%E5%95%86%E5%9F%8E/buyerAddress.png" alt="buyerAddress"></p>
<blockquote>
<p>构建实体类 BuyerAddress ：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@DynamicInsert</span></span><br><span class="line"><span class="meta">@DynamicUpdate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyerAddress</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer addressId;</span><br><span class="line">    <span class="keyword">private</span> String buyerName;</span><br><span class="line">    <span class="keyword">private</span> String buyerPhone;</span><br><span class="line">    <span class="keyword">private</span> String buyerAddress;</span><br><span class="line">    <span class="keyword">private</span> String areaCode;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建 BuyerAddressRepository ：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BuyerAddressRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">BuyerAddress</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyerAddressRepositoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BuyerAddressRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;BuyerAddress&gt; list = repository.findAll();</span><br><span class="line">        <span class="keyword">for</span> (BuyerAddress buyerAddress : list) &#123;</span><br><span class="line">            System.out.println(buyerAddress);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BuyerAddress buyerAddress = <span class="keyword">new</span> BuyerAddress();</span><br><span class="line">        buyerAddress.setAreaCode(<span class="string">&quot;330104&quot;</span>);</span><br><span class="line">        buyerAddress.setBuyerAddress(<span class="string">&quot;广东省深圳市罗湖区科技路123号456室&quot;</span>);</span><br><span class="line">        buyerAddress.setBuyerName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">        buyerAddress.setBuyerPhone(<span class="string">&quot;13967856432&quot;</span>);</span><br><span class="line">        repository.save(buyerAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BuyerAddress buyerAddress = repository.findById(<span class="number">36</span>).get();</span><br><span class="line">        buyerAddress.setBuyerName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">        repository.save(buyerAddress);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-5-OrderMaster-持久化"><a href="#4-5-OrderMaster-持久化" class="headerlink" title="4.5 OrderMaster 持久化"></a>4.5 OrderMaster 持久化</h4><p>数据库有如下数据</p>
]]></content>
      <categories>
        <category>项目实战</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring Boot+Vue</tag>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>day03-循环-方法进阶-数组</title>
    <url>/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p><strong><em>今日学习内容：循环语句、方法进阶、数组</em></strong></p>
<span id="more"></span>

<h1 id="第一章、循环语句"><a href="#第一章、循环语句" class="headerlink" title="第一章、循环语句"></a>第一章、循环语句</h1><h2 id="1-1、循环语句概述"><a href="#1-1、循环语句概述" class="headerlink" title="1.1、循环语句概述"></a>1.1、循环语句概述</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复执行这个循环体时，需要在合适的时候把循环判断条件修改为<span class="keyword">false</span>，从而结束循环，否则循环将一直执行下去，形成死循环</span><br></pre></td></tr></table></figure>

<h2 id="1-2、循环语句1—for"><a href="#1-2、循环语句1—for" class="headerlink" title="1.2、循环语句1—for"></a>1.2、循环语句1—for</h2><h3 id="1-2-1、格式"><a href="#1-2-1、格式" class="headerlink" title="1.2.1、格式"></a>1.2.1、格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句; 判断条件语句; 条件控制语句)&#123;</span><br><span class="line">		循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-2、执行流程"><a href="#1-2-2、执行流程" class="headerlink" title="1.2.2、执行流程"></a>1.2.2、执行流程</h3><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/2019-12-14_14-56-11.jpg" alt="2019-12-14_14-56-11" style="zoom:33%;">

<h2 id="1-3、循环语句2—while"><a href="#1-3、循环语句2—while" class="headerlink" title="1.3、循环语句2—while"></a>1.3、循环语句2—while</h2><h3 id="1-3-1、格式"><a href="#1-3-1、格式" class="headerlink" title="1.3.1、格式"></a>1.3.1、格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化表达式；</span><br><span class="line"><span class="keyword">while</span>(判断条件语句)&#123;</span><br><span class="line">	循环体</span><br><span class="line">	控制条件语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-2、执行流程"><a href="#1-3-2、执行流程" class="headerlink" title="1.3.2、执行流程"></a>1.3.2、执行流程</h3><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/2019-12-14_15-07-23.jpg" alt="2019-12-14_15-07-23" style="zoom:33%;">

<h2 id="1-4、循环语句3—do…while"><a href="#1-4、循环语句3—do…while" class="headerlink" title="1.4、循环语句3—do…while"></a>1.4、循环语句3—do…while</h2><h3 id="1-4-1、格式"><a href="#1-4-1、格式" class="headerlink" title="1.4.1、格式"></a>1.4.1、格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化语句</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  循环体</span><br><span class="line">  条件控制语句</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br><span class="line">⚠️注意：<span class="keyword">do</span>...<span class="keyword">while</span>循环的特点：无条件执行一次循环体，即使我们将循环条件直接写成<span class="keyword">false</span>，也依然会循环一次。这样的</span><br><span class="line">循环具有一定的风险性，因此初学者不建议使用<span class="keyword">do</span>...<span class="keyword">while</span>循环。</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无条件执行一次&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="keyword">false</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-2、执行流程"><a href="#1-4-2、执行流程" class="headerlink" title="1.4.2、执行流程"></a>1.4.2、执行流程</h3><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/2019-12-14_15-15-01.jpg" alt="2019-12-14_15-15-01" style="zoom:33%;">

<h2 id="1-5、循环语句的区别"><a href="#1-5、循环语句的区别" class="headerlink" title="1.5、循环语句的区别"></a>1.5、循环语句的区别</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 和 <span class="keyword">while</span> 的小区别：</span><br><span class="line"><span class="number">1</span>）控制条件语句所控制的那个变量，在<span class="keyword">for</span>循环结束后，就不能再被访问到了，而<span class="keyword">while</span>循环结束还可以继续使用，如果你想继续		</span><br><span class="line">    使用，就用<span class="keyword">while</span>，否则推荐使用<span class="keyword">for</span>。原因是<span class="keyword">for</span>循环结束，该变量就从内存中消失，能够提高内存的使用效率。</span><br><span class="line"><span class="number">2</span>）在已知循环次数的时候使用推荐使用<span class="keyword">for</span>，循环次数未知的时推荐使用<span class="keyword">while</span>。</span><br></pre></td></tr></table></figure>

<h2 id="1-6、跳出语句"><a href="#1-6、跳出语句" class="headerlink" title="1.6、跳出语句"></a>1.6、跳出语句</h2><h3 id="1-6-1、break"><a href="#1-6-1、break" class="headerlink" title="1.6.1、break"></a>1.6.1、break</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用场景：终止<span class="keyword">switch</span>、循环</span><br><span class="line">	<span class="number">2</span>）在选择结构<span class="keyword">switch</span>语句中</span><br><span class="line">  	<span class="number">3</span>）在循环语句中</span><br><span class="line">	<span class="number">4</span>）离开使用场景的存在是没有意义的</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="comment">//需求:打印完两次HelloWorld之后结束循环</span></span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">      	<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    	System.out.println(<span class="string">&quot;HelloWorld&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-2、continue"><a href="#1-6-2、continue" class="headerlink" title="1.6.2、continue"></a>1.6.2、continue</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用场景：结束本次循环，继续下一次的循环</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="comment">//需求:不打印第三次HelloWorld</span></span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">      	<span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    	System.out.println(<span class="string">&quot;HelloWorld&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="第二章、扩展知识点"><a href="#第二章、扩展知识点" class="headerlink" title="第二章、扩展知识点"></a>第二章、扩展知识点</h1><h2 id="2-1、死循环"><a href="#2-1、死循环" class="headerlink" title="2.1、死循环"></a>2.1、死循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">定义：循环中的条件永远为<span class="keyword">true</span>，死循环的是永不结束的循环。例如：<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2、嵌套循环"><a href="#2-2、嵌套循环" class="headerlink" title="2.2、嵌套循环"></a>2.2、嵌套循环</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">所谓嵌套循环：是指一个循环的循环体是另一个循环。比如<span class="keyword">for</span>循环里面还有一个<span class="keyword">for</span>循环，就是嵌套循环。总共的循环次数=外循环次数*内循环次数。</span><br><span class="line">其中<span class="keyword">for</span>和<span class="keyword">while</span>、<span class="keyword">while</span>和<span class="keyword">while</span>、<span class="keyword">for</span>和<span class="keyword">for</span>等都可以相互嵌套。</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 格式：</span></span><br><span class="line">  <span class="keyword">for</span>(初始化语句<span class="number">1</span>; 判断条件语句<span class="number">1</span>; 控制条件语句<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(初始化语句<span class="number">2</span>; 判断条件语句<span class="number">2</span>; 控制条件语句<span class="number">2</span>) &#123;</span><br><span class="line">    		循环体 </span><br><span class="line">    &#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">// 练习：使用嵌套循环，打印5*8的矩形</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//5*8的矩形，打印5行*号，每行8个</span></span><br><span class="line">  <span class="comment">//外循环5次，内循环8次</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">      <span class="comment">//不换行打印星号</span></span><br><span class="line">      System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//内循环打印8个星号后，需要一次换行</span></span><br><span class="line">    System.out.println();</span><br><span class="line">  &#125;</span><br><span class="line">｝</span><br><span class="line"><span class="comment">// 思考题：打印99乘法表</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/%E7%9F%A9%E9%98%B5.png" alt="矩阵"></p>
<p>九九乘法表：</p>
<p><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/%E4%B9%98%E6%B3%95%E8%A1%A8.png" alt="乘法表"></p>
<h1 id="第三章、方法进阶"><a href="#第三章、方法进阶" class="headerlink" title="第三章、方法进阶"></a>第三章、方法进阶</h1><h2 id="1、方法定义的格式详解"><a href="#1、方法定义的格式详解" class="headerlink" title="1、方法定义的格式详解"></a>1、方法定义的格式详解</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">  <span class="comment">//代码省略...</span></span><br><span class="line">  <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;	</span><br><span class="line"><span class="number">1</span>）修饰符： <span class="keyword">public</span> <span class="keyword">static</span> 固定写法</span><br><span class="line"><span class="number">2</span>）返回值类型： 表示方法运行的结果的数据类型，方法执行后将结果返回到调用者</span><br><span class="line"><span class="number">3</span>）参数列表：方法在运算过程中的未知数据，调用者调用方法时传递</span><br><span class="line"><span class="number">4</span>）<span class="keyword">return</span>：将方法执行后的结果带给调用者，方法执行到 <span class="keyword">return</span> ，整个方法运行结束</span><br><span class="line"><span class="number">5</span>）<span class="keyword">return</span> 结果; 这里的<span class="string">&quot;结果&quot;</span>在开发中，我们正确的叫法成为方法的返回值</span><br></pre></td></tr></table></figure>

<h2 id="2、定义方法的两个明确"><a href="#2、定义方法的两个明确" class="headerlink" title="2、定义方法的两个明确"></a>2、定义方法的两个明确</h2><p>1）明确返回值类型：方法计算的是整数的求和，结果也必然是个整数，返回值类型定义为 int 类型。<br>2）明确参数列表：计算哪两个整数的和，并不清楚，但可以确定是整数，参数列表可以定义两个 int 类型的变量，由调用者调用方法时传递</p>
<h2 id="3、方法调用流程图解"><a href="#3、方法调用流程图解" class="headerlink" title="3、方法调用流程图解"></a>3、方法调用流程图解</h2><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/2019-12-14_15-58-45.jpg" alt="2019-12-14_15-58-45" style="zoom:33%;">

<h2 id="3、定义方法练习"><a href="#3、定义方法练习" class="headerlink" title="3、定义方法练习"></a>3、定义方法练习</h2><h3 id="3-1、练习一"><a href="#3-1、练习一" class="headerlink" title="3.1、练习一"></a>3.1、练习一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比较两个整数是否相同</span></span><br><span class="line">分析：定义方法实现功能，需要有两个明确，即 返回值 和 参数列表 </span><br><span class="line">	<span class="number">1</span>）明确返回值：比较整数，比较的结果只有两种可能，相同或不同，因此结果是布尔类型，比较的结果相同为<span class="keyword">true</span></span><br><span class="line">	<span class="number">2</span>）明确参数列表：比较的两个整数不确定，所以默认定义两个<span class="keyword">int</span>类型的参数</span><br></pre></td></tr></table></figure>

<h3 id="3-2、练习二"><a href="#3-2、练习二" class="headerlink" title="3.2、练习二"></a>3.2、练习二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算1+2+3...+100的和</span></span><br><span class="line">分析：定义方法实现功能，需要有两个明确，即 返回值 和 参数 </span><br><span class="line">	<span class="number">1</span>）明确返回值：<span class="number">1</span>~<span class="number">100</span>的求和，计算后必然还是整数，返回值类型是<span class="keyword">int</span></span><br><span class="line">	<span class="number">2</span>）明确参数：需求中已知到计算的数据，没有未知的数据，不定义参数</span><br></pre></td></tr></table></figure>

<h3 id="3-3、练习三"><a href="#3-3、练习三" class="headerlink" title="3.3、练习三"></a>3.3、练习三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现不定次数打印</span></span><br><span class="line">分析：定义方法实现功能，需要有两个明确，即 返回值 和 参数 </span><br><span class="line">	<span class="number">1</span>）明确返回值：方法中打印出 HelloWorld 即可，没有计算结果，返回值类型 <span class="keyword">void</span> </span><br><span class="line">	<span class="number">2</span>）明确参数：打印几次不清楚，参数定义一个整型参数</span><br></pre></td></tr></table></figure>

<h2 id="4、定义方法的注意事项"><a href="#4、定义方法的注意事项" class="headerlink" title="4、定义方法的注意事项"></a>4、定义方法的注意事项</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）定义位置，类中方法外面。</span><br><span class="line"><span class="number">2</span>）返回值类型，必须要和 <span class="keyword">return</span> 语句返回的类型相同，否则编译失败 </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5、方法调用的三种形式"><a href="#5、方法调用的三种形式" class="headerlink" title="5、方法调用的三种形式"></a>5、方法调用的三种形式</h2><h3 id="5-1、直接调用"><a href="#5-1、直接调用" class="headerlink" title="5.1、直接调用"></a>5.1、直接调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接写方法名调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;方法被调用&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2、赋值调用"><a href="#5-2、赋值调用" class="headerlink" title="5.2、赋值调用"></a>5.2、赋值调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用方法，在方法前面定义变量，接收方法返回值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = getSum(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3、输出语句调用"><a href="#5-3、输出语句调用" class="headerlink" title="5.3、输出语句调用"></a>5.3、输出语句调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在输出语句中调用方法， System.out.println(方法名());</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(getSum(<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不能用输出语句调用 void 类型的方法。因为方法执行后没有结果，也就打印不出任何内容</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(printHello());<span class="comment">// 错误，不能输出语句调用void类型方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、方法重载（overload）"><a href="#6、方法重载（overload）" class="headerlink" title="6、方法重载（overload）"></a>6、方法重载（overload）</h2><h3 id="6-1、什么是方法重载"><a href="#6-1、什么是方法重载" class="headerlink" title="6.1、什么是方法重载"></a>6.1、什么是方法重载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法重载：指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返回值类型无关</span></span><br><span class="line"><span class="comment">// 特点：</span></span><br><span class="line">    <span class="number">1</span>）参数列表：个数不同 、数据类型不同 、顺序不同 </span><br><span class="line">    <span class="number">2</span>）重载方法调用：JVM通过方法的参数列表，调用不同的方法</span><br></pre></td></tr></table></figure>

<h1 id="第四章、数组的定义和访问"><a href="#第四章、数组的定义和访问" class="headerlink" title="第四章、数组的定义和访问"></a>第四章、数组的定义和访问</h1><h2 id="4-1、容器概述"><a href="#4-1、容器概述" class="headerlink" title="4.1、容器概述"></a>4.1、容器概述</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 案例分析：</span></span><br><span class="line">	现在需要统计某公司员工的工资情况，例如计算平均工资、找到最高工资等。假设该公司有<span class="number">50</span>名员工，用前面所学的知识，程序首先需要声明<span class="number">50</span>个变量来分别记住每位员工的工资，然后在进行操作，这样做会显得很麻烦，而且错误率也会很高。因此我们可以使用容器进行操作。将所有的数据全部存储到一个容器中，统一操作</span><br><span class="line"><span class="comment">// 容器概念</span></span><br><span class="line">	容器：是将多个数据存储到一起，每个数据称为该容器的元素</span><br><span class="line">  生活中的容器：水杯，衣柜，教室</span><br></pre></td></tr></table></figure>

<h2 id="4-2、数组的概念"><a href="#4-2、数组的概念" class="headerlink" title="4.2、数组的概念"></a>4.2、数组的概念</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组：就是存储固定长度数据的容器，保证多个数据的数据类型要一致</span></span><br></pre></td></tr></table></figure>

<h2 id="4-3、数组的定义"><a href="#4-3、数组的定义" class="headerlink" title="4.3、数组的定义"></a>4.3、数组的定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组定义格式详解：</span><br><span class="line">  <span class="number">1</span>）数组存储的数据类型： 创建的数组容器可以存储什么数据类型。</span><br><span class="line">  <span class="number">2</span>）[] : 表示数组。</span><br><span class="line">  <span class="number">3</span>）数组名字：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。</span><br><span class="line">  <span class="number">4</span>）<span class="keyword">new</span>：关键字，创建数组使用的关键字。</span><br><span class="line">  <span class="number">5</span>）数组存储的数据类型： 创建的数组容器可以存储什么数据类型。</span><br><span class="line">  <span class="number">6</span>）[长度]：数组的长度，表示数组容器中可以存储多少个元素。</span><br><span class="line">  <span class="number">7</span>）注意：</span><br><span class="line">  		数组有定长特性，长度一旦指定，不可更改，和水杯道理相同，买了一个<span class="number">2</span>升的水杯，总容量就是<span class="number">2</span>升，不能多也不能少</span><br></pre></td></tr></table></figure>

<h3 id="4-3-1、方式一"><a href="#4-3-1、方式一" class="headerlink" title="4.3.1、方式一"></a>4.3.1、方式一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式：</span></span><br><span class="line">	数组存储的数据类型[] 数组名字 = <span class="keyword">new</span> 数组存储的数据类型[长度];</span><br><span class="line"><span class="comment">// 示例：定义一个可以存储3个整数的数组容器</span></span><br><span class="line">	<span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h3 id="4-3-2、方式二"><a href="#4-3-2、方式二" class="headerlink" title="4.3.2、方式二"></a>4.3.2、方式二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">	数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3.</span>..&#125;;</span><br><span class="line"><span class="comment">// 示例：定义一个存储1，2，3，4，5整数的数组容器</span></span><br><span class="line">	<span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-3、方式三"><a href="#4-3-3、方式三" class="headerlink" title="4.3.3、方式三"></a>4.3.3、方式三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">	数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3.</span>..&#125;;</span><br><span class="line"><span class="comment">// 示例：定义一个存储1，2，3，4，5整数的数组容器</span></span><br><span class="line">	<span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="4-4、数组的访问（重点）"><a href="#4-4、数组的访问（重点）" class="headerlink" title="4.4、数组的访问（重点）"></a>4.4、数组的访问（重点）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 索引： 每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为数组索引 (index)，可以通过数组的索引访问到数组中的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式：数组名[索引]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引访问数组中的元素：</span></span><br><span class="line">	<span class="number">1</span>）数组名[索引]=数值		为数组中的元素赋值</span><br><span class="line">	<span class="number">2</span>）变量=数组名[索引]		获取出数组中的元素</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义存储int类型数组，赋值元素1，2，3，4，5</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//为0索引元素赋值为6</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line">        <span class="comment">//获取数组0索引上的元素</span></span><br><span class="line">        <span class="keyword">int</span> i = arr[<span class="number">0</span>];</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//直接输出数组0索引元素</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="第五章、数组原理内存图"><a href="#第五章、数组原理内存图" class="headerlink" title="第五章、数组原理内存图"></a>第五章、数组原理内存图</h1><h2 id="5-1、内存概述"><a href="#5-1、内存概述" class="headerlink" title="5.1、内存概述"></a>5.1、内存概述</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）内存是计算机中的重要原件，临时存储区域，作用是运行程序。我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。</span><br><span class="line"><span class="number">2</span>）Java虚拟机要运行程序，必须要对内存进行空间的分配和管理</span><br></pre></td></tr></table></figure>

<h2 id="5-2、Java虚拟机内存划分"><a href="#5-2、Java虚拟机内存划分" class="headerlink" title="5.2、Java虚拟机内存划分"></a>5.2、Java虚拟机内存划分</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式</span></span><br><span class="line">JVM内存划分：</span><br><span class="line">  	寄存器       给CPU使用，和我们开发无关。</span><br><span class="line">	本地方法栈   JVM在使用操作系统功能的时候使用，和我们开发无关。</span><br><span class="line">	方法区 	 存储可以运行的<span class="class"><span class="keyword">class</span>文件。</span></span><br><span class="line"><span class="class">	堆内存 	 存储对象或者数组，<span class="title">new</span>来创建的，都存储在堆内存。</span></span><br><span class="line"><span class="class">	方法栈      方法运行时使用的内存，比如<span class="title">main</span>方法运行，进入方法栈中执行</span></span><br></pre></td></tr></table></figure>

<img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/2019-12-14_16-40-54.jpg" alt="2019-12-14_16-40-54" style="zoom: 50%;">

<h2 id="5-3、数组在内存中的存储"><a href="#5-3、数组在内存中的存储" class="headerlink" title="5.3、数组在内存中的存储"></a>5.3、数组在内存中的存储</h2><h3 id="5-3-1、一个数组内存图"><a href="#5-3-1、一个数组内存图" class="headerlink" title="5.3.1、一个数组内存图"></a>5.3.1、一个数组内存图</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    System.out.println(arr);<span class="comment">//[I@5f150435</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span>）以上方法执行，输出的结果是[I@5f150435，这个是什么呢？是数组在内存中的地址。</span><br><span class="line"><span class="number">2</span>）<span class="keyword">new</span>出来的内容，都是在堆内存中存储的，而方法中的变量arr保存的是数组的地址</span><br><span class="line"><span class="number">3</span>）输出arr[<span class="number">0</span>]，就会输出arr保存的内存地址中数组中<span class="number">0</span>索引上的元素</span><br></pre></td></tr></table></figure>

<img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/2019-12-14_16-44-38.jpg" alt="2019-12-14_16-44-38" style="zoom:50%;">

<h3 id="5-3-2、两个数组内存图"><a href="#5-3-2、两个数组内存图" class="headerlink" title="5.3.2、两个数组内存图"></a>5.3.2、两个数组内存图</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    System.out.println(arr);</span><br><span class="line">    System.out.println(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/2019-12-14_16-46-48.jpg" alt="2019-12-14_16-46-48" style="zoom:50%;">

<h3 id="5-3-3、两个变量指向一个数组"><a href="#5-3-3、两个变量指向一个数组" class="headerlink" title="5.3.3、两个变量指向一个数组"></a>5.3.3、两个变量指向一个数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义数组，存储3个元素</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//数组索引进行赋值</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">//输出3个索引上的元素值</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">//定义数组变量arr2，将arr的地址赋值给arr2</span></span><br><span class="line">    <span class="keyword">int</span>[] arr2 = arr;</span><br><span class="line">    arr2[<span class="number">1</span>] = <span class="number">9</span>; </span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/2019-12-14_16-48-00.jpg" alt="2019-12-14_16-48-00" style="zoom:50%;">

<p><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84.png" alt="数组"></p>
<h1 id="第六章、数组的常见操作"><a href="#第六章、数组的常见操作" class="headerlink" title="第六章、数组的常见操作"></a>第六章、数组的常见操作</h1><h2 id="6-1、数组越界异常"><a href="#6-1、数组越界异常" class="headerlink" title="6.1、数组越界异常"></a>6.1、数组越界异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 观察代码：运行后会出现什么结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">// 0 1 2</span></span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分析：创建数组，赋值3个元素，数组的索引就是0，1，2，没有3索引，因此我们不能访问数组中不存在的索引，程序运行后，将会抛出 ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码</span></span><br></pre></td></tr></table></figure>

<h2 id="6-2、数组空指针异常"><a href="#6-2、数组空指针异常" class="headerlink" title="6.2、数组空指针异常"></a>6.2、数组空指针异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 观察代码：运行后会出现什么结果</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    arr = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">｝</span><br><span class="line"><span class="comment">// 分析：arr = null 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的空指针异常是不能出现的，一旦出现了，就必须要修改我们编写的代码</span></span><br><span class="line"><span class="comment">// 分析内存图</span></span><br></pre></td></tr></table></figure>

<h2 id="6-3、数组的遍历（重点）"><a href="#6-3、数组的遍历（重点）" class="headerlink" title="6.3、数组的遍历（重点）"></a>6.3、数组的遍历（重点）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组遍历： 就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基础</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 优化：以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们需要改造成循环的写法。数组的索引是 0 到 lenght-1 ，可以作为循环的条件出现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    		System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86.png" alt="数组遍历"></p>
<h2 id="6-4、数组获取最大值元素"><a href="#6-4、数组获取最大值元素" class="headerlink" title="6.4、数组获取最大值元素"></a>6.4、数组获取最大值元素</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最大值获取：从数组的所有元素中找出最大值</span></span><br><span class="line"><span class="comment">// 实现思路：</span></span><br><span class="line">      <span class="number">1</span>）定义变量，保存数组<span class="number">0</span>索引上的元素</span><br><span class="line">      <span class="number">2</span>）遍历数组，获取出数组中的每个元素</span><br><span class="line">      <span class="number">3</span>）将遍历到的元素和保存数组<span class="number">0</span>索引上值的变量进行比较</span><br><span class="line">      <span class="number">4</span>）如果数组元素的值大于了变量的值，变量记录住新的值</span><br><span class="line">      <span class="number">5</span>）数组循环遍历结束，变量保存的就是数组中的最大值</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = &#123; <span class="number">5</span>, <span class="number">15</span>, <span class="number">2000</span>, <span class="number">10000</span>, <span class="number">100</span>, <span class="number">4000</span> &#125;;</span><br><span class="line">            <span class="comment">//定义变量，保存数组中0索引的元素</span></span><br><span class="line">            <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//遍历数组，取出每个元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="comment">//遍历到的元素和变量max比较</span></span><br><span class="line">                <span class="comment">//如果数组元素大于max</span></span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">                    <span class="comment">//max记录住大值</span></span><br><span class="line">                    max = arr[i];</span><br><span class="line">            	&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组最大值是： &quot;</span> + max);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/%E6%9C%80%E5%A4%A7%E5%80%BC.png" alt="最大值"></p>
<h2 id="6-5、数组反转"><a href="#6-5、数组反转" class="headerlink" title="6.5、数组反转"></a>6.5、数组反转</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组的反转： 数组中的元素颠倒顺序，例如原始数组为1,2,3,4,5，反转后的数组为5,4,3,2,1</span></span><br><span class="line"><span class="comment">// 实现思想：数组最远端的元素互换位置。实现反转，就需要将数组最远端元素位置交换</span></span><br><span class="line">      <span class="number">1</span>）定义两个变量，保存数组的最小索引和最大索引</span><br><span class="line">      <span class="number">2</span>）两个索引上的元素交换位置</span><br><span class="line">      <span class="number">3</span>）最小索引++，最大索引--，再次交换位置</span><br><span class="line">      <span class="number">4</span>）最小索引超过了最大索引，数组反转操作结束</span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">            循环中定义变量min=0最小索引</span></span><br><span class="line"><span class="comment">            max=arr.length‐1最大索引</span></span><br><span class="line"><span class="comment">            min++,max‐‐</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>, max = arr.length ‐ <span class="number">1</span>; min &lt;= max; min++, max‐‐) &#123;</span><br><span class="line">              <span class="comment">//利用第三方变量完成数组中的元素交换</span></span><br><span class="line">              <span class="keyword">int</span> temp = arr[min];</span><br><span class="line">              arr[min] = arr[max];</span><br><span class="line">              arr[max] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 遍历输出反转后的数组</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">              System.out.println(arr[i]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/%E9%80%86%E5%BA%8F.png" alt="逆序"></p>
<h1 id="第七章、数组作为方法参数或返回值"><a href="#第七章、数组作为方法参数或返回值" class="headerlink" title="第七章、数组作为方法参数或返回值"></a>第七章、数组作为方法参数或返回值</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">以前的方法中我们学习了方法的参数和返回值，但是使用的都是基本数据类型。那么作为引用类型的数组能否作为</span><br><span class="line">方法的参数进行传递呢，当然是可以的</span><br><span class="line">⚠️注意：</span><br><span class="line">  <span class="number">1</span>）数组是引用数据类型，引用数据类型作为方法参数或返回值，传递的都是内存地址</span><br><span class="line">  <span class="number">2</span>）方法的参数为基本类型时,传递的是数据值. 方法的参数为引用类型时,传递的是地址值</span><br></pre></td></tr></table></figure>

<h2 id="7-1、数组作为方法参数"><a href="#7-1、数组作为方法参数" class="headerlink" title="7.1、数组作为方法参数"></a>7.1、数组作为方法参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组作为方法参数传递，传递的参数是数组内存的地址</span></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line">  <span class="comment">//调用方法，传递数组</span></span><br><span class="line">  printArray(arr);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建方法，方法接收数组类型的参数</span></span><br><span class="line"><span class="comment">进行数组的遍历</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  		System.out.println(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/2019-12-14_17-09-25.jpg" alt="2019-12-14_17-09-25" style="zoom: 50%;">

<h2 id="7-2、数组作为方法返回值"><a href="#7-2、数组作为方法返回值" class="headerlink" title="7.2、数组作为方法返回值"></a>7.2、数组作为方法返回值</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组作为方法的返回值，返回的是数组的内存地址</span></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//调用方法，接收数组的返回值</span></span><br><span class="line">    <span class="comment">//接收到的是数组的内存地址</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = getArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    		System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建方法，返回值是数组类型</span></span><br><span class="line"><span class="comment">return返回数组的地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getArray() &#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="comment">//返回数组的地址，返回到调用者</span></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/2019-12-14_17-12-28.jpg" alt="2019-12-14_17-12-28" style="zoom:50%;">

<h2 id="7-3、方法的参数类型区别"><a href="#7-3、方法的参数类型区别" class="headerlink" title="7.3、方法的参数类型区别"></a>7.3、方法的参数类型区别</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码分析</span></span><br><span class="line"><span class="number">1</span>）分析下列程序代码，计算输出结果。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    change(a, b); <span class="comment">// 基本数据类型作为参数，是值传递</span></span><br><span class="line">    System.out.println(a); <span class="comment">// a = 1</span></span><br><span class="line">    System.out.println(b); <span class="comment">// b = 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    a = a + b; <span class="comment">// 3</span></span><br><span class="line">    b = b + a; <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）分析下列程序代码，计算输出结果。</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); <span class="comment">// 1</span></span><br><span class="line">    change(arr); <span class="comment">// 引用类型作为参数，是引用传递</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]); <span class="comment">// 200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">⚠️总结：方法的参数为基本类型时,传递的是数据值. 方法的参数为引用类型时,传递的是地址值</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/%E6%8E%92%E5%BA%8F.png" alt="排序"></p>
<h3 id="局部数组变量回收"><a href="#局部数组变量回收" class="headerlink" title="局部数组变量回收"></a><font style="color:red">局部数组变量回收</font></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    fun(a);</span><br><span class="line">    System.out.print(<span class="string">&quot;倒序输出为：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;  &quot;</span>+a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len= a.length;</span><br><span class="line">    <span class="keyword">int</span>[] b=<span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--,j++) &#123;</span><br><span class="line">        b[j]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;  &quot;</span>+b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    a=b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2021/04/11/day03-%E5%BE%AA%E7%8E%AF-%E6%96%B9%E6%B3%95%E8%BF%9B%E9%98%B6-%E6%95%B0%E7%BB%84/%E5%B1%80%E9%83%A8%E6%95%B0%E7%BB%84%E5%9B%9E%E6%94%B6.png" alt="局部数组回收"></p>
<p>由图可知，当一个新的数组在方法中被声明时，及时从主方法中传递过来了 a数组的值，但在fun 方法中并不能影响到主方法中的 a 数组。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>培训学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>day06-关键字-static-Math-ArrayList</title>
    <url>/2021/04/15/day06-%E5%85%B3%E9%94%AE%E5%AD%97-static-Math-ArrayList/</url>
    <content><![CDATA[<p><strong><em>今日内容：常用 static 关键字、Math、ArrayList</em></strong></p>
<span id="more"></span>

<h1 id="第一章、API"><a href="#第一章、API" class="headerlink" title="第一章、API"></a>第一章、API</h1><h2 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h2><p>API(Application Programming Interface)，应用程序编程接口。Java API是一本程序员的 字典 ，是JDK中提供给<br>我们使用的类的说明文档。这些类将底层的代码实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可。所以我们可以通过查询API的方式，来学习Java提供的类，并得知如何使用它们</p>
<h2 id="1-2、使用步骤"><a href="#1-2、使用步骤" class="headerlink" title="1.2、使用步骤"></a>1.2、使用步骤</h2><ol>
<li>打开帮助文档。</li>
<li>点击显示，找到索引，看到输入框。</li>
<li>你要找谁？在输入框里输入，然后回车。</li>
<li>看包。java.lang下的类不需要导包，其他的需要导包。</li>
<li>看类的解释和说明。</li>
<li>学习构造方法。</li>
<li>使用成员方法</li>
</ol>
<h1 id="第二章、Scanner"><a href="#第二章、Scanner" class="headerlink" title="第二章、Scanner"></a>第二章、Scanner</h1><h2 id="2-1、什么是Scanner类"><a href="#2-1、什么是Scanner类" class="headerlink" title="2.1、什么是Scanner类"></a>2.1、什么是Scanner类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 键盘录入：一个可以根据键盘录入，解析出基本类型和字符串的简单文本扫描器</span></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in); <span class="comment">// System.in 指的是通过键盘录入数据</span></span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br></pre></td></tr></table></figure>

<h2 id="2-2、引用类型使用步骤"><a href="#2-2、引用类型使用步骤" class="headerlink" title="2.2、引用类型使用步骤"></a>2.2、引用类型使用步骤</h2><h3 id="2-2-1、导包"><a href="#2-2-1、导包" class="headerlink" title="2.2.1、导包"></a>2.2.1、导包</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用import关键字导包，在类的所有代码之前导包，引入要使用的类型，java.lang包下的所有类无需导入</span></span><br><span class="line"><span class="comment">// 格式：</span></span><br><span class="line">	<span class="keyword">import</span> 包名.类名;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2、创建对象"><a href="#2-2-2、创建对象" class="headerlink" title="2.2.2、创建对象"></a>2.2.2、创建对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用该类的构造方法，创建一个该类的对象</span></span><br><span class="line"><span class="comment">// 格式：</span></span><br><span class="line">	数据类型 变量名 = <span class="keyword">new</span> 数据类型(参数列表);</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-3、调用方法"><a href="#2-2-3、调用方法" class="headerlink" title="2.2.3、调用方法"></a>2.2.3、调用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用该类的成员方法，完成指定功能</span></span><br><span class="line"><span class="comment">// 格式：</span></span><br><span class="line">	变量名.方法名();</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt(); <span class="comment">// 接收一个键盘录入的整数</span></span><br></pre></td></tr></table></figure>

<h2 id="2-3、Scanner使用步骤"><a href="#2-3、Scanner使用步骤" class="headerlink" title="2.3、Scanner使用步骤"></a>2.3、Scanner使用步骤</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看类</span></span><br><span class="line">	java.util.Scanner ：该类需要<span class="keyword">import</span>导入后使用。</span><br><span class="line"><span class="comment">// 查看构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Scanner</span><span class="params">(InputStream source)</span> : 构造一个新的 Scanner ，它生成的值是从指定的输入流扫描的。</span></span><br><span class="line"><span class="function"><span class="comment">// 查看成员方法</span></span></span><br><span class="line"><span class="function">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">()</span> ：将输入信息的下一个标记扫描为一个 <span class="keyword">int</span> 值。</span></span><br><span class="line"><span class="function"><span class="comment">// 课下练习</span></span></span><br><span class="line"><span class="function">    1.键盘录入两个数并求和</span></span><br><span class="line"><span class="function">    2.键盘录入三个数求最大值</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4、匿名对象"><a href="#2-4、匿名对象" class="headerlink" title="2.4、匿名对象"></a>2.4、匿名对象</h2><p>// 概述：创建对象时，只有创建对象的语句，却没有把对象地址值赋值给某个变量。虽然是创建对象的简化写法，但是应用场景非常有限。</p>
<p>匿名对象 ：没有变量名的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式：new 类名(参数列表)</span></span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">应用场景</span><br><span class="line"><span class="number">1.</span> 创建匿名对象直接调用方法，没有变量名。</span><br><span class="line">	<span class="keyword">new</span> Scanner(System.in)；</span><br><span class="line"><span class="number">2.</span> 一旦调用两次方法，就是创建了两个对象，造成浪费，请看如下代码</span><br><span class="line">  	<span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line">	<span class="keyword">new</span> Scanner(System.in).nextInt();</span><br><span class="line">	⚠️注意：一个匿名对象，只能使用一次。</span><br><span class="line"><span class="number">3.</span> 匿名对象可以作为方法的参数和返回值</span><br><span class="line">  <span class="comment">// 作为参数：</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 普通方式</span></span><br><span class="line">          Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">          input(sc);</span><br><span class="line">          <span class="comment">//匿名对象作为方法接收的参数</span></span><br><span class="line">          input(<span class="keyword">new</span> Scanner(System.in));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Scanner sc)</span></span>&#123;</span><br><span class="line">          System.out.println(sc);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// 作为返回值</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 普通方式</span></span><br><span class="line">          Scanner sc = getScanner();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scanner <span class="title">getScanner</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="comment">//普通方式</span></span><br><span class="line">          <span class="comment">//Scanner sc = new Scanner(System.in);</span></span><br><span class="line">          <span class="comment">//return sc;</span></span><br><span class="line">          <span class="comment">//匿名对象作为方法返回值</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="第三章、Random"><a href="#第三章、Random" class="headerlink" title="第三章、Random"></a>第三章、Random</h1><h2 id="3-1、什么是Random"><a href="#3-1、什么是Random" class="headerlink" title="3.1、什么是Random"></a>3.1、什么是Random</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此类的实例用于生成伪随机数</span></span><br><span class="line"><span class="comment">// 生成一个随机数</span></span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> i = r.nextInt();</span><br></pre></td></tr></table></figure>

<h2 id="3-2、Random的使用"><a href="#3-2、Random的使用" class="headerlink" title="3.2、Random的使用"></a>3.2、Random的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查看类</span></span><br><span class="line">	java.util.Random ：该类需要 <span class="keyword">import</span>导入使后使用。</span><br><span class="line"><span class="comment">// 查看构造方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Random</span><span class="params">()</span> ：创建一个新的随机数生成器。</span></span><br><span class="line"><span class="function"><span class="comment">// 查看成员方法</span></span></span><br><span class="line"><span class="function">	<span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextInt</span><span class="params">(<span class="keyword">int</span> n)</span> ：返回一个伪随机数，范围在 0 （包括）和 指定值 n （不包括）之间的 <span class="keyword">int</span> 值</span></span><br><span class="line"><span class="function"><span class="comment">// 示例：使用Random类，完成生成3个10以内的随机整数的操作</span></span></span><br><span class="line"><span class="function">	<span class="comment">//1. 导包</span></span></span><br><span class="line"><span class="function"><span class="keyword">import</span> java.util.Random</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01_Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//2. 创建键盘录入数据的对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//3. 随机生成一个数据</span></span><br><span class="line">            <span class="keyword">int</span> number = r.nextInt(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">//4. 输出数据</span></span><br><span class="line">            System.out.println(<span class="string">&quot;number:&quot;</span>+ number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个 Random 对象，每次调用 nextInt() 方法，都会生成一个随机数</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3、Random练习"><a href="#3-3、Random练习" class="headerlink" title="3.3、Random练习"></a>3.3、Random练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>获取随机数：获取<span class="number">1</span>-n之间的随机数，包含n</span><br><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">50</span>;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 获取随机数</span></span><br><span class="line">        <span class="keyword">int</span> number = r.nextInt(n) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 输出随机数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;number:&quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span>猜数字小游戏</span><br><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02Random</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 系统产生一个随机数1‐100之间的。</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> number = r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 键盘录入我们要猜的数据</span></span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你要猜的数字(1‐100)：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> guessNumber = sc.nextInt();</span><br><span class="line">            <span class="comment">// 比较这两个数据(用if语句)</span></span><br><span class="line">            <span class="keyword">if</span> (guessNumber &gt; number) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你猜的数据&quot;</span> + guessNumber + <span class="string">&quot;大了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (guessNumber &lt; number) &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;你猜的数据&quot;</span> + guessNumber + <span class="string">&quot;小了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;恭喜你,猜中了&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第四章、ArrayList"><a href="#第四章、ArrayList" class="headerlink" title="第四章、ArrayList"></a>第四章、ArrayList</h1><h2 id="4-1、引入对象数组"><a href="#4-1、引入对象数组" class="headerlink" title="4.1、引入对象数组"></a>4.1、引入对象数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用学生数组，存储是3个学生对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    		<span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01StudentArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建学生数组</span></span><br><span class="line">        Student[] students = <span class="keyword">new</span> Student[<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;曹操&quot;</span>,<span class="number">40</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;刘备&quot;</span>,<span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;孙权&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//把学生对象作为元素赋值给学生数组</span></span><br><span class="line">        students[<span class="number">0</span>] = s1;</span><br><span class="line">        students[<span class="number">1</span>] = s2;</span><br><span class="line">        students[<span class="number">2</span>] = s3;</span><br><span class="line">        <span class="comment">//遍历学生数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;students.length; x++) &#123;</span><br><span class="line">            Student s = students[x];</span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot;‐‐‐&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 到目前为止，我们想存储对象数据，选择的容器，只有对象数组。而数组的长度是固定的，无法适应数据变化的需求。为了解决这个问题，Java提供了另一个容器 java.util.ArrayList 集合类,让我们可以更便捷的存储和操作对象数据</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2、什么是ArrayList类"><a href="#4-2、什么是ArrayList类" class="headerlink" title="4.2、什么是ArrayList类"></a>4.2、什么是ArrayList类</h2><p> <code>java.util.ArrayList</code>是大小可变的数组的实现，存储在内的数据称为元素。此类提供一些方法来操作内部存储的元素。 ArrayList 中可不断添加元素，其大小也自动增长</p>
<h2 id="4-3、ArrayList使用步骤"><a href="#4-3、ArrayList使用步骤" class="headerlink" title="4.3、ArrayList使用步骤"></a>4.3、ArrayList使用步骤</h2><p>1.查看类<br>  <code> java.util.ArrayList&lt;E&gt;</code> ：该类需要 import导入使后使用。<br>  <code>&lt;E&gt;</code>表示一种指定的数据类型，叫做泛型 E ，取自Element（元素）的首字母。在出现 E 的地方，我们使<br>  用一种引用数据类型将其替换即可，表示我们将存储哪种引用类型的元素。代码如下：<br>    <code>ArrayList&lt;String&gt;，ArrayList&lt;Student&gt;</code></p>
<p>2.查看构造方法<br>    <code>public ArrayList()</code> ：构造一个内容为空的集合<br>  基本格式：<br>    <code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</code><br>    简化格式：在JDK 7后,右侧泛型的尖括号之内可以留空，但是&lt;&gt;仍然要写<br>    <code>ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;()</code><br>3.查看成员方法<br>  <code>public boolean add(E e)</code> ： 将指定的元素添加到此集合的尾部。参数 E e ，在构造<code>ArrayList</code>对象时， <code>&lt;E&gt;</code> 指定了什么数据类型，那么 <code>add(E e)</code> 方法中，只能添加什么数据类型的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例：使用ArrayList类，存储三个字符串元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02StudentArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建学生数组</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        String s1 = <span class="string">&quot;曹操&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;刘备&quot;</span>;</span><br><span class="line">        String s3 = <span class="string">&quot;孙权&quot;</span>;</span><br><span class="line">        <span class="comment">//打印学生ArrayList集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//把学生对象作为元素添加到集合</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line">        <span class="comment">//打印学生ArrayList集合</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-4、常用方法和遍历"><a href="#4-4、常用方法和遍历" class="headerlink" title="4.4、常用方法和遍历"></a>4.4、常用方法和遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于元素的操作,基本体现在——增、删、查。常用的方法有：</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> 		将指定的元素添加到此集合的尾部。</span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> 	移除此集合中指定位置上的元素。返回被删除的元素。</span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> 		返回此集合中指定位置上的元素。返回获取的元素。</span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> 					返回此集合中的元素数。遍历集合时，可以控制索引范围，防止越界</span></span><br><span class="line"><span class="function"><span class="comment">// 示例</span></span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> class Demo01ArrayListMethod </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          <span class="comment">//创建集合对象</span></span><br><span class="line">          ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">          <span class="comment">//添加元素</span></span><br><span class="line">          list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">          list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">          list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">          <span class="comment">//public E get(int index):返回指定索引处的元素</span></span><br><span class="line">          System.out.println(<span class="string">&quot;get:&quot;</span>+list.get(<span class="number">0</span>));</span><br><span class="line">          System.out.println(<span class="string">&quot;get:&quot;</span>+list.get(<span class="number">1</span>));</span><br><span class="line">          System.out.println(<span class="string">&quot;get:&quot;</span>+list.get(<span class="number">2</span>));</span><br><span class="line">          <span class="comment">//public int size():返回集合中的元素的个数</span></span><br><span class="line">          System.out.println(<span class="string">&quot;size:&quot;</span>+list.size());</span><br><span class="line">          <span class="comment">//public E remove(int index):删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line">          System.out.println(<span class="string">&quot;remove:&quot;</span>+list.remove(<span class="number">0</span>));</span><br><span class="line">          <span class="comment">//遍历输出</span></span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">          		System.out.println(list.get(i));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-5、如何存储基本数据类型"><a href="#4-5、如何存储基本数据类型" class="headerlink" title="4.5、如何存储基本数据类型"></a>4.5、如何存储基本数据类型</h2><p><code>ArrayList</code>对象不能存储基本类型，只能存储引用类型的数据。类似 <code>&lt;int&gt;</code> 不能写，但是存储基本数据类型对应的包装类型是可以的。所以，想要存储基本类型数据， &lt;&gt; 中的数据类型，必须转换后才能编写，转换写法如下：</p>
<table>
<thead>
<tr>
<th align="center">基本类型</th>
<th align="center">包装类型</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">Byte</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">Short</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">Integer</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">Long</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">Float</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">Double</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">Character</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">Boolean</td>
</tr>
</tbody></table>
<blockquote>
<p>我们发现，只有 Integer 和 Character 需要特殊记忆，其他基本类型只是首字母大写即可。那么存储基本类型数<br>据，代码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ArrayListMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-6、ArrayList练习"><a href="#4-6、ArrayList练习" class="headerlink" title="4.6、ArrayList练习"></a>4.6、ArrayList练习</h2><h3 id="4-6-1、数值添加到集合"><a href="#4-6-1、数值添加到集合" class="headerlink" title="4.6.1、数值添加到集合"></a>4.6.1、数值添加到集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成6个1~33之间的随机整数,添加到集合,并遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Random 对象</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">// 创建ArrayList 对象</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 添加随机数到集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = random.nextInt(<span class="number">33</span>) + <span class="number">1</span>;</span><br><span class="line">            list.add(r);</span><br><span class="line">				&#125;</span><br><span class="line">        <span class="comment">// 遍历集合输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        		System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-2、对象添加到"><a href="#4-6-2、对象添加到" class="headerlink" title="4.6.2、对象添加到"></a>4.6.2、对象添加到</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义4个学生对象,添加到集合,并遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02ArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;赵丽颖&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;唐嫣&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;景甜&quot;</span>,<span class="number">25</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;柳岩&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        <span class="comment">//把学生对象作为元素添加到集合中</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line">        list.add(s4);</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; list.size(); x++) &#123;</span><br><span class="line">            Student s = list.get(x);</span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot;‐‐‐&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-3、打印集合"><a href="#4-6-3、打印集合" class="headerlink" title="4.6.3、打印集合"></a>4.6.3、打印集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历：for循环</span></span><br><span class="line"><span class="comment">// 取值：get(index)</span></span><br></pre></td></tr></table></figure>

<h1 id="第五章、static（重点）"><a href="#第五章、static（重点）" class="headerlink" title="第五章、static（重点）"></a>第五章、static（重点）</h1><h2 id="6-1、概述"><a href="#6-1、概述" class="headerlink" title="6.1、概述"></a>6.1、概述</h2><blockquote>
<p>关于 static 关键字的使用，它可以用来修饰的成员变量和成员方法，被修饰的成员是属于类的，而不是单单是属于某个对象的。也就是说，既然属于类，就可以不靠创建对象来调用了</p>
</blockquote>
<h2 id="6-2、定义和使用格式"><a href="#6-2、定义和使用格式" class="headerlink" title="6.2、定义和使用格式"></a>6.2、定义和使用格式</h2><h3 id="6-2-1、静态变量"><a href="#6-2-1、静态变量" class="headerlink" title="6.2.1、静态变量"></a>6.2.1、静态变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 static关键字修饰的成员变量</span></span><br><span class="line">  <span class="keyword">static</span> 数据类型 变量名；</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> numberID；</span><br><span class="line"><span class="comment">// 示例：比如说，基础班新班开班，学员报到。现在想为每一位新来报到的同学编学号（sid），从第一名同学开始，sid为1，以此类推。学号必须是唯一的，连续的，并且与班级的人数相符，这样以便知道，要分配给下一名新同学的学号是多少。这样我们就需要一个变量，与单独的每一个学生对象无关，而是与整个班级同学数量有关。所以，我们可以这样定义一个静态变量numberOfStudent，代码如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 学生的id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sid;</span><br><span class="line">    <span class="comment">// 类变量，记录学生数量，分配学号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> numberOfStudent = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="comment">// 通过 numberOfStudent 给学生分配学号</span></span><br><span class="line">        <span class="keyword">this</span>.sid = ++numberOfStudent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印属性值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    		System.out.println(<span class="string">&quot;Student : name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;, sid=&quot;</span> + sid );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;李四&quot;</span>, <span class="number">24</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王五&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;赵六&quot;</span>, <span class="number">26</span>);</span><br><span class="line">        s1.show(); <span class="comment">// Student : name=张三, age=23, sid=1</span></span><br><span class="line">        s2.show(); <span class="comment">// Student : name=李四, age=24, sid=2</span></span><br><span class="line">        s3.show(); <span class="comment">// Student : name=王五, age=25, sid=3</span></span><br><span class="line">        s4.show(); <span class="comment">// Student : name=赵六, age=26, sid=4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-2、静态方法"><a href="#6-2-2、静态方法" class="headerlink" title="6.2.2、静态方法"></a>6.2.2、静态方法</h3><blockquote>
<p>当 static 修饰成员方法时，该方法称为类方法，习惯称为静态方法。静态方法在声明中有 static ，建议使用类名来调用，而不需要创建类的对象。调用方式非常简单。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> 返回值类型 方法名 (参数列表)&#123;</span><br><span class="line">  		<span class="comment">// 执行语句</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  		System.out.println(<span class="string">&quot;num:&quot;</span> + numberOfStudent);</span><br><span class="line">  &#125;</span><br><span class="line">⚠️静态方法调用的注意事项：</span><br><span class="line">    <span class="number">1</span>）静态方法只能访问类静态变量和静态方法。</span><br><span class="line">    <span class="number">2</span>）静态方法不能直接访问普通成员变量或成员方法。反之，成员方法可以直接访问类静态变量或静态方法。</span><br><span class="line">    <span class="number">3</span>）静态方法中，不能使用<span class="keyword">this</span>关键字</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-2-3、调用格式"><a href="#6-2-3、调用格式" class="headerlink" title="6.2.3、调用格式"></a>6.2.3、调用格式</h3><blockquote>
<p>被static修饰的成员可以并且建议通过类名直接访问。虽然也可以通过对象名访问静态成员，原因即多个对象均属于一个类，共享使用同一个静态成员，但是不建议，会出现警告信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式</span></span><br><span class="line">    <span class="comment">// 访问类变量</span></span><br><span class="line">    类名.类变量名；</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 调用静态方法</span></span><br><span class="line">    类名.静态方法名(参数)；</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StuDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 访问类变量</span></span><br><span class="line">        System.out.println(Student.numberOfStudent);</span><br><span class="line">        <span class="comment">// 调用静态方法</span></span><br><span class="line">        Student.showNum();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3、静态原理图解"><a href="#6-3、静态原理图解" class="headerlink" title="6.3、静态原理图解"></a>6.3、静态原理图解</h2><p><strong style="color:red">static 修饰的内容：</strong><br>        <strong>1）是随着类的加载而加载的，且只加载一次。</strong><br>        <strong>2）存储于一块固定的内存区域（静态区），所以，可以直接被类名调用。</strong><br>        <strong>3）它优先于对象存在，所以，可以被所有对象共享</strong></p>
<img src="/2021/04/15/day06-%E5%85%B3%E9%94%AE%E5%AD%97-static-Math-ArrayList/教学大纲\04-JavaSE\img\2019-12-15_00-48-05.jpg" alt="2019-12-15_00-48-05" style="zoom:50%;">

<h2 id="6-4、静态代码块"><a href="#6-4、静态代码块" class="headerlink" title="6.4、静态代码块"></a>6.4、静态代码块</h2><blockquote>
<p>静态代码块：定义在成员位置，使用static修饰的代码块{ }。<br>        位置：类中方法外（不在乎在哪一行，只要是类中方法外就行）<br>        执行：随着类的加载而执行且执行一次，优先于main方法和构造方法的执行。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式：</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassName</span></span>&#123;</span><br><span class="line">			<span class="keyword">static</span> &#123;</span><br><span class="line">				<span class="comment">// 执行语句</span></span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">// 作用：进行初始化赋值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> number;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; list;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 给类变量赋值</span></span><br><span class="line">        number = <span class="number">2</span>;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 添加元素到集合中</span></span><br><span class="line">        list.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">⚠️<span class="keyword">static</span> 关键字，可以修饰变量、方法和代码块。在使用的过程中，其主要目的还是想在不创建对象的情况</span><br><span class="line">下，去调用方法。</span><br></pre></td></tr></table></figure>

<h1 id="第六章、Arrays"><a href="#第六章、Arrays" class="headerlink" title="第六章、Arrays"></a>第六章、Arrays</h1><h2 id="7-1、操作数组"><a href="#7-1、操作数组" class="headerlink" title="7.1、操作数组"></a>7.1、操作数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//java.util.Arrays 此类包含用来操作数组的各种方法，比如排序和搜索等。其所有方法均为静态方法，调用起来非常简单</span></span><br><span class="line"><span class="number">1</span>）<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] a)</span> ：将数组转为字符串</span></span><br><span class="line"><span class="function"><span class="comment">// 示例1</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义int 数组</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">4</span>,<span class="number">657</span>,<span class="number">8</span>,<span class="number">69</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="comment">// 打印数组,输出地址值</span></span><br><span class="line">    System.out.println(arr); <span class="comment">// [I@2ac1fdc4</span></span><br><span class="line">    <span class="comment">// 数组内容转为字符串</span></span><br><span class="line">    String s = Arrays.toString(arr);</span><br><span class="line">    <span class="comment">// 打印字符串,输出内容</span></span><br><span class="line">    System.out.println(s); <span class="comment">// [2, 34, 35, 4, 657, 8, 69, 9]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>）<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> ：对<span class="keyword">int</span>类型数组升序排序</span></span><br><span class="line"><span class="function"><span class="comment">// 示例2</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义int 数组</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">48</span>, <span class="number">4</span>, <span class="number">46</span>, <span class="number">35</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">2</span>&#125;;</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 排序前:[24, 7, 5, 48, 4, 46, 35, 11, 6,2]</span></span><br><span class="line">    System.out.println(<span class="string">&quot;排序前:&quot;</span>+ Arrays.toString(arr)); </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 升序排序</span></span><br><span class="line">    Arrays.sort(arr);</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 排序后:[2, 4, 5, 6, 7, 11, 24, 35, 46,48]</span></span><br><span class="line">    System.out.println(<span class="string">&quot;排序后:&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 练习：将一个随机字符串中的所有字符升序排列，并倒序打印。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArraysTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义随机的字符串</span></span><br><span class="line">        String line = <span class="string">&quot;ysKUreaytWTRHsgFdSAoidq&quot;</span>;</span><br><span class="line">        <span class="comment">// 转换为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chars = line.toCharArray();</span><br><span class="line">        <span class="comment">// 升序排序</span></span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        <span class="comment">// 反向遍历打印</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = chars.length‐<span class="number">1</span>; i &gt;= <span class="number">0</span> ; i‐‐) &#123;</span><br><span class="line">        		System.out.print(chars[i]+<span class="string">&quot; &quot;</span>); <span class="comment">// y y t s s r q o i g e d d a W U T S R K H F A</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第七章、Math"><a href="#第七章、Math" class="headerlink" title="第七章、Math"></a>第七章、Math</h1><h2 id="8-1、基本数学运算"><a href="#8-1、基本数学运算" class="headerlink" title="8.1、基本数学运算"></a>8.1、基本数学运算</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.lang.Math 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。类似这样的工具类，其所有方法均为静态方法，并且不会创建对象，调用起来非常简单</span></span><br><span class="line"><span class="number">1</span>）<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> a)</span> ：返回 <span class="keyword">double</span> 值的绝对值</span></span><br><span class="line"><span class="function">    <span class="keyword">double</span> d1 </span>= Math.abs(‐<span class="number">5</span>); <span class="comment">//d1的值为5</span></span><br><span class="line">    <span class="keyword">double</span> d2 = Math.abs(<span class="number">5</span>); <span class="comment">//d2的值为5</span></span><br><span class="line"><span class="number">2</span>）<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> a)</span> ：返回大于等于参数的最小的整数</span></span><br><span class="line"><span class="function">  	<span class="keyword">double</span> d1 </span>= Math.ceil(<span class="number">3.3</span>); <span class="comment">//d1的值为 4.0</span></span><br><span class="line">    <span class="keyword">double</span> d2 = Math.ceil(‐<span class="number">3.3</span>); <span class="comment">//d2的值为 ‐3.0</span></span><br><span class="line">    <span class="keyword">double</span> d3 = Math.ceil(<span class="number">5.1</span>); <span class="comment">//d3的值为 6.0</span></span><br><span class="line"><span class="number">3</span>）<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> a)</span> ：返回小于等于参数最大的整数</span></span><br><span class="line"><span class="function">  	<span class="keyword">double</span> d1 </span>= Math.floor(<span class="number">3.3</span>); <span class="comment">//d1的值为3.0</span></span><br><span class="line">    <span class="keyword">double</span> d2 = Math.floor(‐<span class="number">3.3</span>); <span class="comment">//d2的值为‐4.0</span></span><br><span class="line">    <span class="keyword">double</span> d3 = Math.floor(<span class="number">5.1</span>); <span class="comment">//d3的值为 5.0</span></span><br><span class="line"><span class="number">4</span>）<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> a)</span> ：返回最接近参数的 <span class="keyword">long</span>。<span class="params">(相当于四舍五入）</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">long</span> d1 = Math.round(<span class="number">5.5</span>)</span></span>; <span class="comment">//d1的值为6.0</span></span><br><span class="line">		<span class="keyword">long</span> d2 = Math.round(<span class="number">5.4</span>); <span class="comment">//d2的值为5.0</span></span><br><span class="line"><span class="comment">// 练习：计算在 -10.8 到 5.9 之间，绝对值大于 6 或者小于 2.1 的整数有多少个？</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义最小值</span></span><br><span class="line">        <span class="keyword">double</span> min = ‐<span class="number">10.8</span>;</span><br><span class="line">        <span class="comment">// 定义最大值</span></span><br><span class="line">        <span class="keyword">double</span> max = <span class="number">5.9</span>;</span><br><span class="line">        <span class="comment">// 定义变量计数</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 范围内循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">double</span> i = Math.ceil(min); i &lt;= max; i++) &#123;</span><br><span class="line">            <span class="comment">// 获取绝对值并判断</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(i) &gt; <span class="number">6</span> || Math.abs(i) &lt; <span class="number">2.1</span>) &#123;</span><br><span class="line">                <span class="comment">// 计数</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;个数为: &quot;</span> + count + <span class="string">&quot; 个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                                                    </span><br></pre></td></tr></table></figure>

<h4 id="今日作业"><a href="#今日作业" class="headerlink" title="今日作业"></a>今日作业</h4><blockquote>
<p>随机数</p>
</blockquote>
<p><img src="/2021/04/15/day06-%E5%85%B3%E9%94%AE%E5%AD%97-static-Math-ArrayList/%E9%9A%8F%E6%9C%BA.png" alt="随机"></p>
<blockquote>
<p>ArrayList</p>
</blockquote>
<p><img src="/2021/04/15/day06-%E5%85%B3%E9%94%AE%E5%AD%97-static-Math-ArrayList/%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84.png" alt="对象数组"></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>培训学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>day07-String</title>
    <url>/2021/04/18/day07-String/</url>
    <content><![CDATA[<p><strong><em>今日内容：String</em></strong></p>
<span id="more"></span>

<h1 id="第一章、String（重点）"><a href="#第一章、String（重点）" class="headerlink" title="第一章、String（重点）"></a>第一章、String（重点）</h1><h2 id="1-1、String类的概述"><a href="#1-1、String类的概述" class="headerlink" title="1.1、String类的概述"></a>1.1、String类的概述</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 概述</span></span><br><span class="line">java.lang.String 类代表字符串。Java程序中所有的字符串文字（例如 <span class="string">&quot;abc&quot;</span> ）都可以被看作是实现此类的实例。类 String 中包括用于检查各个字符串的方法，比如用于比较字符串，搜索字符串，提取子字符串以及创建具有翻译为大写或小写的所有字符的字符串的副本</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 特点</span></span><br><span class="line"> 	 <span class="number">1.</span>字符串不变：字符串的值在创建后不能被更改</span><br><span class="line">      String s1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">      s1 += <span class="string">&quot;d&quot;</span>; <span class="comment">// s1 = s1 + &quot;d&quot;  // s1 =&quot;abcd&quot;</span></span><br><span class="line">      System.out.println(s1); <span class="comment">// &quot;abcd&quot;</span></span><br><span class="line">      <span class="comment">// 内存中有&quot;abc&quot;，&quot;abcd&quot;两个对象，s1从指向&quot;abc&quot;，改变指向，指向了&quot;abcd&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="number">2.</span>因为String对象是不可变的，所以它们可以被共享</span><br><span class="line">      String s1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">      String s2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">      <span class="comment">// 内存中只有一个&quot;abc&quot;对象被创建，同时被s1和s2共享		</span></span><br><span class="line"></span><br><span class="line">	<span class="number">3.</span><span class="string">&quot;abc&quot;</span> 等效于 <span class="keyword">char</span>[] data=&#123; <span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;b&#x27;</span> , <span class="string">&#x27;c&#x27;</span> &#125;</span><br><span class="line">      例如：</span><br><span class="line">      	String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">      相当于：</span><br><span class="line">        <span class="keyword">char</span> data[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        String str = <span class="keyword">new</span> String(data);</span><br><span class="line">        <span class="comment">// String底层是靠字符数组实现的</span></span><br></pre></td></tr></table></figure>

<h2 id="1-2、使用步骤"><a href="#1-2、使用步骤" class="headerlink" title="1.2、使用步骤"></a>1.2、使用步骤</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">查看类</span><br><span class="line">	java.lang.String ：此类不需要导入。</span><br><span class="line">查看构造方法</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">String</span><span class="params">()</span> ：初始化新创建的 String对象，以使其表示空字符序列。</span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">char</span>[] value)</span> ：通过当前参数中的字符数组来构造新的String。</span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="title">String</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> ：通过使用平台的默认字符集解码当前参数中的字节数组来构造新的String。</span></span><br><span class="line"><span class="function">构造举例，代码如下：</span></span><br><span class="line"><span class="function">  <span class="comment">// 无参构造</span></span></span><br><span class="line"><span class="function">  String str </span>= <span class="keyword">new</span> String（）；</span><br><span class="line">  <span class="comment">// 通过字符数组构造</span></span><br><span class="line">  <span class="keyword">char</span> chars[] = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">  String str2 = <span class="keyword">new</span> String(chars);</span><br><span class="line">  <span class="comment">// 通过字节数组构造</span></span><br><span class="line">  <span class="keyword">byte</span> bytes[] = &#123; <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span> &#125;;</span><br><span class="line">  String str3 = <span class="keyword">new</span> String(bytes)；</span><br></pre></td></tr></table></figure>

<h2 id="1-3、常用方法"><a href="#1-3、常用方法" class="headerlink" title="1.3、常用方法"></a>1.3、常用方法</h2><h3 id="1-3-1、判断字符串"><a href="#1-3-1、判断字符串" class="headerlink" title="1.3.1、判断字符串"></a>1.3.1、判断字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Object 是&quot;对象&quot;的意思，也是一种引用类型。作为参数类型，表示任意对象都可以传递到方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span> <span class="params">(Object anObject)</span> ：将此字符串与指定对象进行比较</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span> <span class="params">(String anotherString)</span> ：将此字符串与指定对象进行比较，忽略大小写</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 示例：</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class String_Demo01 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建字符串对象</span></span><br><span class="line">        String s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        String s2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        String s3 = <span class="string">&quot;HELLO&quot;</span>;</span><br><span class="line">        <span class="comment">// boolean equals(Object obj):比较字符串的内容是否相同</span></span><br><span class="line">        System.out.println(s1.equals(s2)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(s1.equals(s3)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">        <span class="comment">//boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写</span></span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s3)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-2、获取字符串"><a href="#1-3-2、获取字符串" class="headerlink" title="1.3.2、获取字符串"></a>1.3.2、获取字符串</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span> <span class="params">()</span> ：返回此字符串的长度。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">concat</span> <span class="params">(String str)</span> ：将指定的字符串连接到该字符串的末尾。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span> <span class="params">(<span class="keyword">int</span> index)</span> ：返回指定索引处的 <span class="keyword">char</span>值。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span> <span class="params">(String str)</span> ：返回指定子字符串第一次出现在该字符串内的索引。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span> <span class="params">(<span class="keyword">int</span> beginIndex)</span> ：返回一个子字符串，从beginIndex开始截取字符串到字符串结尾。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span> <span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> ：返回一个子字符串，从beginIndex到endIndex截取字符串。含beginIndex，不含endIndex。</span></span><br><span class="line"><span class="function"><span class="comment">// 示例</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class String_Demo02 </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//创建字符串对象</span></span><br><span class="line">      String s = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">      <span class="comment">// int length():获取字符串的长度，其实也就是字符个数</span></span><br><span class="line">      System.out.println(s.length());</span><br><span class="line">      System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">      <span class="comment">// String concat (String str):将将指定的字符串连接到该字符串的末尾.</span></span><br><span class="line">      String s = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">      String s2 = s.concat(<span class="string">&quot;**hello HJM&quot;</span>);</span><br><span class="line">      System.out.println(s2);<span class="comment">// helloworld**hello HJM</span></span><br><span class="line">      <span class="comment">// char charAt(int index):获取指定索引处的字符</span></span><br><span class="line">      System.out.println(s.charAt(<span class="number">0</span>));</span><br><span class="line">      System.out.println(s.charAt(<span class="number">1</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">      <span class="comment">// int indexOf(String str):获取str在字符串对象中第一次出现的索引,没有返回‐1</span></span><br><span class="line">      System.out.println(s.indexOf(<span class="string">&quot;l&quot;</span>));</span><br><span class="line">      System.out.println(s.indexOf(<span class="string">&quot;owo&quot;</span>));</span><br><span class="line">      System.out.println(s.indexOf(<span class="string">&quot;ak&quot;</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">      <span class="comment">// String substring(int start):从start开始截取字符串到字符串结尾</span></span><br><span class="line">      System.out.println(s.substring(<span class="number">0</span>));</span><br><span class="line">      System.out.println(s.substring(<span class="number">5</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">      <span class="comment">// String substring(int start,int end):从start到end截取字符串。含start，不含end。</span></span><br><span class="line">      System.out.println(s.substring(<span class="number">0</span>, s.length())); <span class="comment">// 前开后闭</span></span><br><span class="line">      System.out.println(s.substring(<span class="number">3</span>,<span class="number">8</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-3、字符串转换"><a href="#1-3-3、字符串转换" class="headerlink" title="1.3.3、字符串转换"></a>1.3.3、字符串转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[] toCharArray () ：将此字符串转换为新的字符数组。</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes () ：使用平台的默认字符集将该 String编码转换为新的字节数组。</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span> <span class="params">(CharSequence target, CharSequence replacement)</span> ：将与target匹配的字符串使用replacement字符串替换</span></span><br><span class="line"><span class="function"><span class="comment">// 示例</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class String_Demo03 </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符串对象</span></span><br><span class="line">        String s = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line">        <span class="comment">// char[] toCharArray():把字符串转换为字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; chs.length; x++) &#123;</span><br><span class="line">        System.out.println(chs[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">        <span class="comment">// byte[] getBytes ():把字符串转换为字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s.getBytes();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; bytes.length; x++) &#123;</span><br><span class="line">        System.out.println(bytes[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">        <span class="comment">// 替换字母it为大写IT</span></span><br><span class="line">        String str = <span class="string">&quot;hjm Hello&quot;</span>;</span><br><span class="line">        String replace = str.replace(<span class="string">&quot;hjm&quot;</span>, <span class="string">&quot;IT&quot;</span>);</span><br><span class="line">        System.out.println(replace); <span class="comment">// IT Hello</span></span><br><span class="line">        System.out.println(<span class="string">&quot;‐‐‐‐‐‐‐‐‐‐‐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CharSequence 是一个接口，也是一种引用类型。作为参数类型，可以把String对象传递到方法</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-4、字符串切割"><a href="#1-3-4、字符串切割" class="headerlink" title="1.3.4、字符串切割"></a>1.3.4、字符串切割</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex) ：将此字符串按照给定的regex（规则）拆分为字符串数组</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String_Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符串对象</span></span><br><span class="line">        String s = <span class="string">&quot;aa|bb|cc&quot;</span>;</span><br><span class="line">        String[] strArray = s.split(<span class="string">&quot;|&quot;</span>); <span class="comment">// [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;]</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; strArray.length; x++) &#123;</span><br><span class="line">        		System.out.println(strArray[x]); <span class="comment">// aa bb cc</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4、String类的练习"><a href="#1-4、String类的练习" class="headerlink" title="1.4、String类的练习"></a>1.4、String类的练习</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.拼接字符串</span></span><br><span class="line"><span class="comment">// 定义一个方法，把数组&#123;1,2,3&#125;按照指定个格式拼接成一个字符串。格式参照如下：[word1#word2#word3]</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个int类型的数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        String s = arrayToString(arr);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s:&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 写方法实现把数组中的元素按照指定的格式拼接成一个字符串</span></span><br><span class="line"><span class="comment">    * 两个明确：</span></span><br><span class="line"><span class="comment">    * 返回值类型：String</span></span><br><span class="line"><span class="comment">    * 参数列表：int[] arr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 创建字符串s</span></span><br><span class="line">         String s = <span class="keyword">new</span> String(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">         <span class="comment">// 遍历数组，并拼接字符串</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (x == arr.length ‐ <span class="number">1</span>) &#123;</span><br><span class="line">                  s = s.concat(arr[x] + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  s = s.concat(arr[x] + <span class="string">&quot;#&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> s;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.统计字符个数</span></span><br><span class="line"><span class="comment">//键盘录入一个字符，统计字符串中大小写字母及数字字符个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串数据</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串数据：&quot;</span>);</span><br><span class="line">        String s = sc.nextLine();</span><br><span class="line">        <span class="comment">//定义三个统计变量，初始化值都是0</span></span><br><span class="line">        <span class="keyword">int</span> bigCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> smallCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> numberCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历字符串，得到每一个字符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;s.length(); x++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = s.charAt(x);</span><br><span class="line">            <span class="comment">//拿字符进行判断</span></span><br><span class="line">            <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            		bigCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">            		smallCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            		numberCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            		System.out.println(<span class="string">&quot;该字符&quot;</span>+ch+<span class="string">&quot;非法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大写字符：&quot;</span>+bigCount+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小写字符：&quot;</span>+smallCount+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字字符：&quot;</span>+numberCount+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="今日作业："><a href="#今日作业：" class="headerlink" title="今日作业："></a>今日作业：</h4><img src="/2021/04/18/day07-String/数量.png" width="65%">

<img src="/2021/04/18/day07-String/拼接.png" width="65%">]]></content>
      <categories>
        <category>Java</category>
        <category>培训学习</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
